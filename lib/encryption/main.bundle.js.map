{
  "version": 3,
  "sources": ["../myencryption/loader.js", "../myencryption/binascii.js", "../myencryption/random.js", "../myencryption/str.js", "../myencryption/exceptions.js", "../myencryption/derive_key.js", "../myencryption/encrypt_data.js", "../myencryption/encrypt_file.js", "../myencryption/key_management.js", "../myencryption/context.js", "../myencryption/stream.js", "../myencryption/version.js"],
  "sourcesContent": ["export function load_script(src) {\r\n    return new Promise((resolve, reject) => {\r\n        const script = document.createElement('script');\r\n        script.src = src;\r\n        script.onload = () => resolve(script);\r\n        script.onerror = e => reject(e);\r\n        document.head.append(script);\r\n    });\r\n}\r\n\r\nexport function load_module(src) {\r\n    return import(src); // just a wrapper\r\n}\r\n\r\nexport function load_deps_es5(deps_name, deps_src) {\r\n    if (Reflect.has(globalThis, deps_name)) return Promise.resolve(Reflect.get(globalThis, deps_name));\r\n    return load_script(deps_src).then(() => {\r\n        return Reflect.get(globalThis, deps_name);\r\n    });\r\n}", "const hexTable = new Array(256);\r\nfor (let i = 0; i < 256; i++) {\r\n    hexTable[i] = i.toString(16).padStart(2, '0');\r\n}\r\n\r\nexport function hexlify(data) {\r\n    if (!data || !(data instanceof Uint8Array)) {\r\n        throw new TypeError(\"Input must be a Uint8Array\");\r\n    }\r\n    const length = data.length;\r\n    const arr = new Array(length);\r\n    for (let i = 0; i < length; i++) {\r\n        arr[i] = hexTable[data[i]];\r\n    }\r\n    return arr.join('');\r\n}\r\n\r\nconst throwing = {\r\n    get InvalidHexStringException() {\r\n        throw new TypeError('Invalid hex string');\r\n    },\r\n}\r\n\r\nexport function unhexlify(hexStr) {\r\n    if (typeof hexStr !== 'string') {\r\n        throw new TypeError(\"Input must be a string\");\r\n    }\r\n    const length = hexStr.length;\r\n    if (length % 2 !== 0) {\r\n        throw new TypeError(\"Hex string must have even length\");\r\n    }\r\n    hexStr = hexStr.toLowerCase();\r\n    const bytes = new Uint8Array(length >> 1);\r\n    for (let i = 0; i < length; i += 2) {\r\n        const highCode = hexStr.charCodeAt(i);\r\n        const lowCode = hexStr.charCodeAt(i + 1);\r\n\r\n        const high = highCode >= 97 && highCode <= 102 ? highCode - 87 :\r\n            highCode >= 48 && highCode <= 57 ? highCode - 48 : throwing.InvalidHexStringException;\r\n        const low = lowCode >= 97 && lowCode <= 102 ? lowCode - 87 :\r\n            lowCode >= 48 && lowCode <= 57 ? lowCode - 48 : throwing.InvalidHexStringException;\r\n\r\n        bytes[i >> 1] = (high << 4) | low;\r\n    }\r\n    return bytes;\r\n}", "export function get_random_bytes(count) {\r\n    const randomBytes = new Uint8Array(count);\r\n    crypto.getRandomValues(randomBytes);\r\n    return randomBytes;\r\n}\r\nexport function get_random_int8_number() {\r\n    const randomBytes = get_random_bytes(1);\r\n    return new Int8Array(randomBytes)[0];\r\n}\r\nexport function get_random_uint8_number() {\r\n    const randomBytes = get_random_bytes(1);\r\n    return new Uint8Array(randomBytes)[0];\r\n}", "export function str_encode(input, encoding = \"utf-8\") {\r\n    if (typeof input !== \"string\") {\r\n        throw new TypeError(\"Input must be a string\");\r\n    }\r\n    if (encoding.toLowerCase() !== \"utf-8\") {\r\n        throw new Error(\"Only 'utf-8' encoding is supported\");\r\n    }\r\n    return new TextEncoder().encode(input);\r\n}\r\nexport function str_decode(input, encoding = \"utf-8\") {\r\n    if (!(input instanceof Uint8Array)) {\r\n        input = new Uint8Array(input);\r\n    }\r\n    if (encoding.toLowerCase() !== \"utf-8\") {\r\n        throw new Error(\"Only 'utf-8' encoding is supported\");\r\n    }\r\n    return new TextDecoder().decode(input);\r\n}", "export class EncryptionError extends Error {\r\n    constructor(message = 'Encryption Error', additional = undefined) {\r\n        super(message, additional);\r\n        this.name = 'EncryptionError';\r\n    }\r\n}\r\n\r\nexport class InternalError extends EncryptionError {\r\n    constructor(message = '(Internal Error)', additional = undefined) {\r\n        super(message, additional);\r\n        this.name = 'InternalError';\r\n    }\r\n}\r\n\r\nexport function raise(message, additional) {\r\n    throw new InternalError(message, additional);\r\n}\r\n\r\nexport class InvalidParameterException extends EncryptionError {\r\n    constructor(message = 'The parameter provided is invalid.', additional = undefined) {\r\n        super(message, additional);\r\n        this.name = 'InvalidParameterException';\r\n    }\r\n}\r\n\r\nexport class BadDataException extends EncryptionError {\r\n    constructor(message = 'The data is bad.', additional = undefined) {\r\n        super(message, additional);\r\n        this.name = 'BadDataException';\r\n    }\r\n}\r\n\r\nexport class InvalidScryptParameterException extends EncryptionError {\r\n    constructor(message = 'The N, r, or p is not valid or out of range.', additional = undefined) {\r\n        super(message, additional);\r\n        this.name = 'InvalidScryptParameterException';\r\n    }\r\n}\r\n\r\nexport class EncryptionVersionMismatchException extends EncryptionError {\r\n    constructor(message = 'The version of the encryption library doesn\\'t match.', additional = undefined) {\r\n        super(message, additional);\r\n        this.name = 'EncryptionVersionMismatchException';\r\n    }\r\n}\r\n\r\nexport class InvalidFileFormatException extends EncryptionError {\r\n    constructor(message = 'The file format is invalid.', additional = undefined) {\r\n        super(message, additional);\r\n        this.name = 'InvalidFileFormatException';\r\n    }\r\n}\r\n\r\nexport class IVException extends EncryptionError {\r\n    constructor(message = 'IV Exception.', additional = undefined) {\r\n        super(message, additional);\r\n        this.name = 'IVException';\r\n    }\r\n}\r\n\r\nexport class FileCorruptedException extends EncryptionError {\r\n    constructor(message = 'File is corrupted.', additional = undefined) {\r\n        super(message, additional);\r\n        this.name = 'FileCorruptedException';\r\n    }\r\n}\r\n\r\nexport class InvalidEndMarkerException extends EncryptionError {\r\n    constructor(message = 'The end marker is invalid.', additional = undefined) {\r\n        super(message, additional);\r\n        this.name = 'InvalidEndMarkerException';\r\n    }\r\n}\r\n\r\nexport class CannotDecryptException extends EncryptionError {\r\n    constructor(message = 'Cannot decrypt', additional = undefined) {\r\n        super(message, additional);\r\n        this.name = 'CannotDecryptException';\r\n    }\r\n}\r\n\r\nexport class CryptContextReusedException extends EncryptionError {\r\n    constructor(message = 'Not allowed to reuse a crypt context.', additional = undefined) {\r\n        super(message, additional);\r\n        this.name = 'CryptContextReusedException';\r\n    }\r\n}\r\n\r\nexport class NotSupportedException extends EncryptionError {\r\n    constructor(message = 'Operation not supported', additional = undefined) {\r\n        super(message, additional);\r\n        this.name = 'NotSupportedException';\r\n    }\r\n}\r\n\r\nexport class EndOfFileException extends EncryptionError {\r\n    constructor(message = 'End of File', additional = undefined) {\r\n        super(message, additional);\r\n        this.name = 'EndOfFileException';\r\n    }\r\n}\r\n\r\nexport class CryptContextNotInitedException extends EncryptionError {\r\n    constructor(message = 'Crypt context is not initialized.', additional = undefined) {\r\n        super(message, additional);\r\n        this.name = 'CryptContextNotInitedException';\r\n    }\r\n}\r\n\r\nexport class InvalidCryptContextTypeException extends EncryptionError {\r\n    constructor(message = 'Invalid crypt context type.', additional = undefined) {\r\n        super(message, additional);\r\n        this.name = 'InvalidCryptContextTypeException';\r\n    }\r\n}\r\n\r\nexport class CryptContextReleasedException extends EncryptionError {\r\n    constructor(message = 'Crypt context has been released.', additional = undefined) {\r\n        super(message, additional);\r\n        this.name = 'CryptContextReleasedException';\r\n    }\r\n}\r\n", "import { load_deps_es5 } from \"./loader.js\";\r\nconst scryptAPI = await load_deps_es5('scrypt', import.meta.resolve('./WebScrypt/scrypt.js'));\r\nimport { hexlify } from \"./binascii.js\";\r\nimport { get_random_bytes, get_random_uint8_number } from \"./random.js\";\r\nimport { str_encode } from \"./str.js\";\r\nimport * as Exceptions from './exceptions.js';\r\n\r\nscryptAPI.setResPath(import.meta.resolve('./WebScrypt/asset/'));\r\nscryptAPI.load();\r\n\r\n// \u5BF9 WebScrypt \u7684\u81EA\u5B9A\u4E49\u5C01\u88C5\r\nexport const scrypt = (function () {\r\n    const queue = [];\r\n    let running = false;\r\n    const work = (task) => new Promise(async (resolve, reject) => {\r\n        scryptAPI.onprogress = p => {\r\n            if (task.onprogress) task.onprogress(p);\r\n        };\r\n        scryptAPI.oncomplete = dk => {\r\n            task.resolve(dk);\r\n            resolve(true);\r\n        };\r\n        scryptAPI.onerror = e => {\r\n            task.reject(e);\r\n            resolve(false);\r\n        };\r\n        try {\r\n            scryptAPI.config({ N: task.N, r: task.r, P: task.p }, { maxPassLen: 8192, maxSaltLen: 2048, maxDkLen: 1024, maxThread: 1 });\r\n            await new Promise(r => scryptAPI.onready = r);\r\n            scryptAPI.hash(task.key, task.salt, task.dklen);\r\n        } catch (e) {\r\n            reject(e);\r\n        }\r\n    });\r\n    async function thread() {\r\n        let task = null;\r\n        while (queue.length) try {\r\n            task = queue.splice(0, 1)[0];\r\n            await work(task);\r\n            await nextTick();\r\n        } catch (e) {\r\n            task?.reject(e);\r\n        }\r\n        running = false;\r\n    }\r\n    return function scrypt(key, salt, N, r, p, dklen, onprogress = null) {\r\n        return new Promise((resolve, reject) => {\r\n            queue.push({\r\n                key, salt, N, r, p, dklen, resolve, reject, onprogress\r\n            });\r\n            if (!running) {\r\n                running = true;\r\n                setTimeout(thread); // \u542F\u52A8\u5B8F\u4EFB\u52A1\r\n            }\r\n        });\r\n    }\r\n})();\r\n\r\nexport const deriveKey__phrases = ['Furina', 'Neuvillette', 'Venti', 'Nahida', 'Kinich', 'Kazuha'];\r\nexport async function derive_key(key, iv, phrase = null, N = null, salt = null, r = 8, p = 1, dklen = 32) {\r\n    if (N === null) N = 262144;\r\n    if (typeof N !== \"number\" || N > 2097152) {\r\n        throw new Exceptions.InvalidScryptParameterException();\r\n    }\r\n\r\n    // (2) \u751F\u6210salt\r\n    if (!salt) {\r\n        salt = get_random_bytes(64);\r\n    }\r\n\r\n    // \u5904\u7406phrase\r\n    if (!phrase) {\r\n        phrase = deriveKey__phrases[(get_random_uint8_number()) % deriveKey__phrases.length];\r\n    }\r\n    if (phrase.includes(\":\")) {\r\n        throw new Exceptions.InvalidParameterException(\"phrase MUST NOT contain \\\":\\\"\");\r\n    }\r\n\r\n    const parameter = `${phrase}:${hexlify(salt)}`;\r\n\r\n    // (3) \u751F\u6210\u52A0\u5BC6\u5BC6\u94A5\r\n    const keyInput = `MyEncryption/1.1 Fontaine/4.2 Iv/${hexlify(iv)} user_parameter=${parameter} user_key=${key}`;\r\n\r\n    // \u4F7F\u7528Scrypt\u8FDB\u884C\u5BC6\u94A5\u6D3E\u751F(pycryptodome\u6CA1\u6709PBKDF2HMAC\uFF0C\u4F7F\u7528Scrypt\u4F5C\u4E3A\u66FF\u4EE3)\r\n    // AES-256\u9700\u898132\u5B57\u8282\u5BC6\u94A5\r\n    const derived_key = await scrypt(str_encode(keyInput), salt, N, r, p, dklen)\r\n\r\n    return ({ derived_key, parameter, N });\r\n}\r\n\r\nfunction nextTick() {\r\n    return new Promise(r => setTimeout(r));\r\n}\r\n\r\n\r\nexport async function scrypt_hex(key, salt, N, r, p, dklen) {\r\n    return hexlify(await scrypt(str_encode(key), str_encode(salt), N, r, p, dklen));\r\n}", "import { get_random_bytes } from \"./random.js\";\r\nimport { derive_key } from \"./derive_key.js\";\r\nimport { hexlify, unhexlify } from \"./binascii.js\";\r\nimport { str_decode, str_encode } from \"./str.js\";\r\nimport * as Exceptions from './exceptions.js';\r\n\r\nfunction safeparse(json) {\r\n    try {\r\n        return JSON.parse(json);\r\n    } catch {\r\n        throw new Exceptions.InvalidParameterException('The JSON is not valid.');\r\n    }\r\n}\r\n\r\nexport async function encrypt_data(message, key, phrase = null, N = null) {\r\n    // (1) \u751F\u6210\u968F\u673AIV (12 bytes for GCM)\r\n    const iv = get_random_bytes(12);\r\n\r\n    // \u6D3E\u751F\u5BC6\u94A5\r\n    const { derived_key, parameter, N: N2 } = await derive_key(key, iv, phrase, N);\r\n    N = N2;\r\n\r\n    // (4) \u52A0\u5BC6\u6D88\u606F\r\n    const cipher = await crypto.subtle.importKey(\"raw\", derived_key, \"AES-GCM\", false, [\"encrypt\"]);\r\n\r\n    if (typeof message === \"string\") {\r\n        message = str_encode(message);\r\n    }\r\n\r\n    const ciphertext = await crypto.subtle.encrypt(\r\n        {\r\n            name: \"AES-GCM\",\r\n            iv: iv\r\n        },\r\n        cipher,\r\n        message\r\n    );\r\n\r\n    // \u7EC4\u5408IV + \u5BC6\u6587 + \u8BA4\u8BC1\u6807\u7B7E\r\n    const encrypted_message = new Uint8Array(iv.length + ciphertext.byteLength);\r\n    encrypted_message.set(iv, 0);\r\n    encrypted_message.set(new Uint8Array(ciphertext), iv.length);\r\n    const message_encrypted = hexlify(encrypted_message);\r\n\r\n    return JSON.stringify({\r\n        data: message_encrypted,\r\n        parameter: parameter,\r\n        N: N,\r\n        v: 5.5\r\n    });\r\n}\r\n\r\n\r\nexport async function decrypt_data(message_encrypted, key) {\r\n    const jsoned = safeparse(message_encrypted);\r\n    const parameter = jsoned.parameter;\r\n    const N = parseInt(jsoned.N);\r\n\r\n    // \u5C06\u5341\u516D\u8FDB\u5236\u5B57\u7B26\u4E32\u8F6C\u6362\u56DE\u5B57\u8282\r\n    const encrypted_data = unhexlify(jsoned.data);\r\n    const [phrase, salt_b64] = parameter.split(':');\r\n    const salt = unhexlify(salt_b64);\r\n\r\n    if (isNaN(N) || !parameter || !encrypted_data || !salt) throw new Exceptions.BadDataException('The message or parameters are bad.')\r\n    if (encrypted_data.length < 28) throw new Exceptions.BadDataException(\"The message was too short.\");\r\n\r\n    // \u63D0\u53D6 IV (\u524D12\u5B57\u8282)\u3001\u5BC6\u6587\u548C\u8BA4\u8BC1\u6807\u7B7E(\u6700\u540E16\u5B57\u8282)\r\n    const iv = encrypted_data.slice(0, 12);\r\n    const ciphertext = encrypted_data.slice(12, -16);\r\n    const tag = encrypted_data.slice(-16);\r\n\r\n    const { derived_key } = await derive_key(key, iv, phrase, N, salt);\r\n\r\n    const cipher = await crypto.subtle.importKey(\"raw\", derived_key, \"AES-GCM\", false, [\"decrypt\"]);\r\n\r\n    try {\r\n        const decrypted_data = await crypto.subtle.decrypt(\r\n            {\r\n                name: \"AES-GCM\",\r\n                iv: iv,\r\n            },\r\n            cipher,\r\n            new Uint8Array([...ciphertext, ...tag])\r\n        );\r\n\r\n        try {\r\n            return str_decode(decrypted_data);\r\n        } catch {\r\n            return decrypted_data;\r\n        }\r\n    }\r\n    catch (e) {\r\n        if (!e) throw new Exceptions.InternalError(`Internal error.`, { cause: e });\r\n        const name = e.name;\r\n        if (name === 'InvalidAccessError') throw new Exceptions.InvalidParameterException('InvalidAccessError.', { cause: e });\r\n        if (name === 'OperationError') throw new Exceptions.CannotDecryptException('Cannot decrypt. Did you provide the correct password?', { cause: e });\r\n        if (!e) throw new Exceptions.InternalError(`Unexpected error.`, { cause: e });\r\n    }\r\n}\r\n\r\n", "import { derive_key } from \"./derive_key.js\";\r\nimport { hexlify, unhexlify } from \"./binascii.js\";\r\nimport { get_random_bytes } from \"./random.js\";\r\nimport { str_encode, str_decode } from \"./str.js\";\r\nimport { encrypt_data, decrypt_data } from \"./encrypt_data.js\";\r\nimport * as Exceptions from './exceptions.js';\r\n\r\nfunction nextTick() {\r\n    return new Promise(r => requestAnimationFrame(r));\r\n}\r\n\r\nexport const PADDING_SIZE = 4096; // 4096 bytes\r\nexport const END_IDENTIFIER = [\r\n    0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA,\r\n];\r\nexport const TAIL_BLOCK_MARKER = [\r\n    0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA,\r\n    0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,\r\n    0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA,\r\n    0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,\r\n];\r\nexport const END_MARKER = [\r\n    0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA,\r\n    0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA,\r\n    0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA,\r\n    0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA,\r\n];\r\nexport const FILE_END_MARKER = [0xFF, 0xFD, 0xF0, 0x10, 0x13, 0xD0, 0x12, 0x18, 0x55, 0xAA];\r\n\r\nexport function normalize_version(major_version, version_marker) {\r\n    if (!major_version) return `Unknown Version`;\r\n    if (String(major_version) === '1.1') version_marker = null;\r\n    if (!version_marker) return `${major_version}/0`;\r\n    return `${major_version}/${version_marker}`;\r\n}\r\n\r\n// versions\r\nexport const ENCRYPTION_FILE_VER_1_1_0 = normalize_version('1.1');\r\nexport const ENCRYPTION_FILE_VER_1_2_10020 = normalize_version('1.2', 10020);\r\n\r\n/**\r\n * \u52A0\u5BC6\u6587\u4EF6\r\n * @param {Object} file_reader - \u6587\u4EF6\u8BFB\u53D6\u5668\u5BF9\u8C61\uFF0C\u9700\u8981\u5B9E\u73B0(start, end) => Promise<Uint8Array>\r\n * @param {Object} file_writer - \u6587\u4EF6\u5199\u5165\u5668\u5BF9\u8C61\uFF0C\u9700\u8981\u5B9E\u73B0write(Uint8Array)\u65B9\u6CD5\r\n * @param {string} key - \u7528\u6237\u5BC6\u94A5\r\n * @param {string|null} phrase - \u53EF\u9009\u77ED\u8BED\uFF0C\u7528\u4E8E\u5BC6\u94A5\u6D3E\u751F\r\n * @param {number|null} N - scrypt\u53C2\u6570N\r\n * @param {number} chunk_size - \u5206\u5757\u5927\u5C0F\uFF0C\u9ED8\u8BA4\u4E3A16MB\r\n * @returns {Promise<boolean>} \u8FD4\u56DE\u52A0\u5BC6\u662F\u5426\u6210\u529F\r\n */\r\nexport async function encrypt_file(file_reader, file_writer, user_key, callback = null, phrase = null, N = null, chunk_size = 32 * 1024 * 1024) {\r\n    // \u5199\u5165\u6587\u4EF6\u5934\u6807\u8BC6\u548C\u7248\u672C (16\u5B57\u8282)\r\n    await file_writer(str_encode('MyEncryption/1.2'));\r\n\r\n    // \u5199\u5165\u7248\u672C\u6807\u8BC6\u7B26\r\n    const VERSION_MARKER = 10020;\r\n    const versionMarkerBuffer = new ArrayBuffer(4);\r\n    new DataView(versionMarkerBuffer).setUint32(0, VERSION_MARKER, true);\r\n    await file_writer(new Uint8Array(versionMarkerBuffer));\r\n\r\n    // \u4EA7\u751F\u4E3B\u5BC6\u94A5\r\n    // TODO: \u4E3B\u5BC6\u94A5\u7684\u968F\u673A\u6027\u975E\u5E38\u91CD\u8981\uFF01\u8003\u8651\u8BA9\u7528\u6237\u79FB\u52A8\u9F20\u6807\u6765\u6536\u96C6\u968F\u673A\u6027\r\n    const key = hexlify(get_random_bytes(64));\r\n    const ekey = await encrypt_data(key, user_key);\r\n    const ekey_bytes = str_encode(ekey);\r\n\r\n    // \u68C0\u67E5\u957F\u5EA6\r\n    if (ekey_bytes.length > PADDING_SIZE) {\r\n        throw new Exceptions.InternalError(\"(Internal Error) This should not happen. Contact the application developer.\");\r\n    }\r\n\r\n    // \u5199\u5165\u4E3B\u5BC6\u94A5\u5BC6\u6587\u957F\u5EA6(4\u5B57\u8282)\u548C\u5185\u5BB9\uFF0C\u586B\u5145\u5230PADDING_SIZE\u5B57\u8282\r\n    const lengthBuffer = new ArrayBuffer(4);\r\n    new DataView(lengthBuffer).setUint32(0, ekey_bytes.length, true);\r\n    await file_writer(new Uint8Array(lengthBuffer));\r\n    await file_writer(ekey_bytes);\r\n\r\n    // \u586B\u5145\u5269\u4F59\u7A7A\u95F4\r\n    const padding = new Uint8Array(PADDING_SIZE - ekey_bytes.length - 4).fill(0);\r\n    await file_writer(padding);\r\n\r\n    // \u751F\u6210\u521D\u59CBIV\u7528\u4E8E\u6D3E\u751F\u5BC6\u94A5 (12\u5B57\u8282)\r\n    callback?.(0); await nextTick();\r\n    const iv_for_key = get_random_bytes(12);\r\n    const { derived_key, parameter, N: N2 } = await derive_key(key, iv_for_key, phrase, N);\r\n    N = N2;\r\n\r\n    // \u51C6\u5907\u5934\u90E8JSON\u6570\u636E\r\n    const header_data = {\r\n        \"parameter\": parameter,\r\n        \"N\": N,\r\n        \"v\": 5.5,\r\n        \"iv\": hexlify(iv_for_key)\r\n    };\r\n    const header_json = str_encode(JSON.stringify(header_data));\r\n\r\n    // \u5199\u5165JSON\u957F\u5EA6(4\u5B57\u8282)\u548CJSON\u6570\u636E\r\n    const headerLengthBuffer = new ArrayBuffer(4);\r\n    new DataView(headerLengthBuffer).setUint32(0, header_json.length, true);\r\n    await file_writer(new Uint8Array(headerLengthBuffer));\r\n    await file_writer(header_json);\r\n\r\n    // \u5199\u5165chunk size\u53C2\u6570\r\n    const chunkSizeBuffer = new ArrayBuffer(8);\r\n    new DataView(chunkSizeBuffer).setBigUint64(0, BigInt(chunk_size), true);\r\n    await file_writer(new Uint8Array(chunkSizeBuffer));\r\n\r\n    let total_bytes = 0; // \u7528\u4E8E\u7EDF\u8BA1\u603B\u5B57\u8282\u6570\r\n    let nonce_counter = 1;\r\n    let position = 0;\r\n\r\n    // \u5199\u5165iv\u53C2\u6570\r\n    const nonce_counter_start = new ArrayBuffer(8);\r\n    new DataView(nonce_counter_start).setBigUint64(0, BigInt(nonce_counter), true);\r\n    await file_writer(new Uint8Array(nonce_counter_start));\r\n\r\n    // \u5206\u5757\u52A0\u5BC6\u5904\u7406\r\n    callback?.(0);\r\n    const cryptoKey = await crypto.subtle.importKey('raw', derived_key, { name: 'AES-GCM' }, false, ['encrypt']);\r\n    while (true) {\r\n        // \u8BFB\u53D6\u6587\u4EF6\u5757\r\n        const chunk = await file_reader(position, position + chunk_size);\r\n        if (chunk.length === 0) break;\r\n        const isFinalChunk = chunk.length < chunk_size;\r\n\r\n        // \u4E3A\u6BCF\u4E2A\u5206\u5757\u751F\u6210\u65B0IV (12\u5B57\u8282)\r\n        const iv = new ArrayBuffer(12);\r\n        // \u786E\u4FDD IV \u552F\u4E00\r\n        if (nonce_counter >= 2 ** 64 || nonce_counter >= Number.MAX_SAFE_INTEGER) {\r\n            throw new Exceptions.IVException(\"nonce_counter exceeded the maximum value.\");\r\n        }\r\n        new DataView(iv).setBigUint64(4, BigInt(nonce_counter), true); // \u5199\u51658\u5B57\u8282\u8BA1\u6570\u5668\r\n        nonce_counter++;\r\n\r\n        if (isFinalChunk) {\r\n            await file_writer(new Uint8Array(TAIL_BLOCK_MARKER));\r\n            // \u5199\u5165\u8BE5\u5206\u5757\u957F\u5EA6\r\n            const chunkLengthBuffer = new ArrayBuffer(8);\r\n            new DataView(chunkLengthBuffer).setBigUint64(0, BigInt(chunk.length), true);\r\n            await file_writer(new Uint8Array(chunkLengthBuffer));\r\n        }\r\n\r\n        // \u4F7F\u7528WebCrypto\u8FDB\u884C\u52A0\u5BC6\r\n        const ivArray = new Uint8Array(iv);\r\n        const ciphertext = await crypto.subtle.encrypt(\r\n            {\r\n                name: 'AES-GCM',\r\n                iv: ivArray,\r\n            },\r\n            cryptoKey,\r\n            chunk\r\n        );\r\n\r\n        // \u5199\u5165\u5206\u5757\u4FE1\u606F: \u5BC6\u6587 + tag(16\u5B57\u8282)\r\n        // \u5BC6\u6587\u7684\u957F\u5EA6\u548C\u539F\u6587\u76F8\u540C\r\n        const ciphertextArray = new Uint8Array(ciphertext);\r\n        await file_writer(ciphertextArray);\r\n\r\n        total_bytes += chunk.length;\r\n        position += chunk.length;\r\n\r\n        callback?.(total_bytes);\r\n    }\r\n\r\n    // \u5199\u5165\u7ED3\u675F\u6807\u8BB0\u548C\u603B\u5B57\u8282\u6570\r\n    await file_writer(new Uint8Array(END_MARKER));\r\n\r\n    const totalBytesBuffer = new ArrayBuffer(8);\r\n    new DataView(totalBytesBuffer).setBigUint64(0, BigInt(total_bytes), true);\r\n    await file_writer(new Uint8Array(totalBytesBuffer));\r\n    await file_writer(new Uint8Array(FILE_END_MARKER));\r\n\r\n    return true;\r\n}\r\n\r\n/**\r\n * \u89E3\u5BC6\u6587\u4EF6\uFF081.1\uFF09\r\n * @deprecated \u4EC5\u4F9B\u517C\u5BB91.1\u7248\u672C\u4F7F\u7528\u3002\r\n * @param {Object} file_reader - \u6587\u4EF6\u8BFB\u53D6\u5668\u5BF9\u8C61\uFF0C\u9700\u8981\u5B9E\u73B0(start, end) => Promise<Uint8Array>\r\n * @param {Object} file_writer - \u6587\u4EF6\u5199\u5165\u5668\u5BF9\u8C61\uFF0C\u9700\u8981\u5B9E\u73B0write(Uint8Array)\u65B9\u6CD5\r\n * @param {string} user_key - \u7528\u6237\u63D0\u4F9B\u7684\u89E3\u5BC6\u5BC6\u94A5\r\n * @param {Function} [callback=null] - \u8FDB\u5EA6\u56DE\u8C03\u51FD\u6570\r\n * @returns {Promise<boolean>} \u8FD4\u56DE\u89E3\u5BC6\u662F\u5426\u6210\u529F\r\n */\r\nexport async function decrypt_file_V_1_1_0(file_reader, file_writer, user_key, callback = null) {\r\n    // \u8BFB\u53D6\u6587\u4EF6\u5934\u5E76\u9A8C\u8BC1\r\n    const header = await file_reader(0, 16);\r\n    if (str_decode(header) !== 'MyEncryption/1.1') {\r\n        throw new TypeError(\"Invalid file format\");\r\n    }\r\n    let read_pos = 16;\r\n\r\n    // \u8BFB\u53D6\u4E3B\u5BC6\u94A5\u5BC6\u6587\u957F\u5EA6\r\n    const ekey_len_bytes = await file_reader(read_pos, read_pos + 4);\r\n    const ekey_len = new DataView(ekey_len_bytes.buffer).getUint32(0, true);\r\n    read_pos += 4;\r\n\r\n    // \u8BFB\u53D6\u4E3B\u5BC6\u94A5\u5BC6\u6587\u5E76\u8DF3\u8FC7\u586B\u5145\r\n    const ekey = str_decode(await file_reader(read_pos, read_pos + ekey_len));\r\n    read_pos += 1024; // \u76F4\u63A5\u8DF3\u8FC71024\u5B57\u8282\u533A\u57DF\r\n\r\n    // \u89E3\u5BC6\u4E3B\u5BC6\u94A5\r\n    const key = await decrypt_data(ekey, user_key);\r\n\r\n    // \u8BFB\u53D6\u5934\u90E8JSON\u957F\u5EA6\r\n    const json_len_bytes = await file_reader(read_pos, read_pos + 4);\r\n    const json_len = new DataView(json_len_bytes.buffer).getUint32(0, true);\r\n    read_pos += 4;\r\n\r\n    // \u89E3\u6790\u5934\u90E8JSON\r\n    const header_json = JSON.parse(\r\n        str_decode(await file_reader(read_pos, read_pos + json_len))\r\n    );\r\n    read_pos += json_len;\r\n\r\n    // \u63D0\u53D6\u6D3E\u751F\u53C2\u6570\r\n    const [phrase, salt_hex] = header_json.parameter.split(':');\r\n    const salt = unhexlify(salt_hex);\r\n    const iv4key = unhexlify(header_json.iv);\r\n    const N = header_json.N;\r\n\r\n    // \u5BF9\u5E94\u52A0\u5BC6\u65F6\uFF0C\u9700\u8981\u63D0\u4F9B\u4E00\u4E2Aiv\uFF0C\u6211\u4EEC\u628Aiv\u53D6\u56DE\u6765\uFF0C\u91CD\u65B0\u751F\u6210\u5BC6\u94A5\uFF08\u6240\u6709\u6570\u636E\u5757\u7684\u5BC6\u94A5\u662F\u76F8\u540C\u7684\uFF09\r\n    callback?.(0);\r\n    await nextTick();\r\n    const { derived_key } = await derive_key(key, iv4key, phrase, N, salt);\r\n\r\n    let total_bytes = 0;\r\n    // \u5206\u5757\u89E3\u5BC6\u5FAA\u73AF\r\n    const cryptoKey = await crypto.subtle.importKey('raw', derived_key, { name: 'AES-GCM' }, false, ['decrypt']);\r\n    while (true) {\r\n        // \u8BFB\u53D6\u5206\u5757\u957F\u5EA6\u6807\u8BB0\r\n        const chunk_len_bytes = await file_reader(read_pos, read_pos + 8);\r\n        read_pos += 8;\r\n\r\n        // \u68C0\u67E5\u7ED3\u675F\u6807\u8BB0\r\n        if (chunk_len_bytes.every((v, i) =>\r\n            v === [0xFF, 0xFD, 0xF0, 0x10, 0x13, 0xD0, 0x12, 0x18][i]\r\n        )) break;\r\n\r\n        // \u89E3\u6790\u5206\u5757\u957F\u5EA6\r\n        const chunk_len = Number(\r\n            new DataView(chunk_len_bytes.buffer).getBigUint64(0, true)\r\n        );\r\n\r\n        // \u8BFB\u53D6IV(12\u5B57\u8282)\u3001\u5BC6\u6587\u548Ctag(16\u5B57\u8282)\r\n        const iv = await file_reader(read_pos, read_pos + 12);\r\n        read_pos += 12;\r\n        const ciphertext = await file_reader(read_pos, read_pos + chunk_len + 16);\r\n        read_pos += chunk_len + 16;\r\n\r\n        const full_ciphertext = ciphertext;\r\n\r\n        // \u4F7F\u7528WebCrypto\u89E3\u5BC6\r\n        const decrypted = await crypto.subtle.decrypt(\r\n            {\r\n                name: 'AES-GCM',\r\n                iv: iv,\r\n            },\r\n            cryptoKey,\r\n            full_ciphertext\r\n        );\r\n\r\n        // \u5199\u5165\u89E3\u5BC6\u540E\u7684\u6570\u636E\r\n        await file_writer(new Uint8Array(decrypted));\r\n        total_bytes += decrypted.byteLength;\r\n        if (callback) callback(total_bytes);\r\n    }\r\n\r\n    // \u9A8C\u8BC1\u603B\u5B57\u8282\u6570\u548C\u7ED3\u675F\u6807\u8BB0\r\n    const total_bytes_bytes = await file_reader(read_pos, read_pos + 8);\r\n    const total_bytes_decrypted = Number(\r\n        new DataView(total_bytes_bytes.buffer).getBigUint64(0, true)\r\n    );\r\n    read_pos += 8;\r\n\r\n    const end_marker = await file_reader(read_pos, read_pos + 2);\r\n    if (total_bytes !== total_bytes_decrypted) throw new Exceptions.FileCorruptedException(\"File corrupted: total bytes mismatch\")\r\n    if (!end_marker.every((v, i) => v === [0x55, 0xAA][i])) throw new Exceptions.InvalidEndMarkerException(\"Invalid end marker\");\r\n\r\n    return true;\r\n}\r\n/**\r\n * \u89E3\u5BC6\u6587\u4EF6\r\n * @param {Object} file_reader - \u6587\u4EF6\u8BFB\u53D6\u5668\u5BF9\u8C61\uFF0C\u9700\u8981\u5B9E\u73B0(start, end) => Promise<Uint8Array>\r\n * @param {Object} file_writer - \u6587\u4EF6\u5199\u5165\u5668\u5BF9\u8C61\uFF0C\u9700\u8981\u5B9E\u73B0write(Uint8Array)\u65B9\u6CD5\r\n * @param {string} user_key - \u7528\u6237\u63D0\u4F9B\u7684\u89E3\u5BC6\u5BC6\u94A5\r\n * @param {Function} [callback=null] - \u8FDB\u5EA6\u56DE\u8C03\u51FD\u6570\r\n * @returns {Promise<boolean>} \u8FD4\u56DE\u89E3\u5BC6\u662F\u5426\u6210\u529F\r\n */\r\nexport async function decrypt_file(file_reader, file_writer, user_key, callback = null) {\r\n    // \u8BFB\u53D6\u6587\u4EF6\u5934\u5E76\u9A8C\u8BC1\r\n    const header = await file_reader(0, 13);\r\n    if (str_decode(header) !== 'MyEncryption/') {\r\n        throw new Exceptions.InvalidFileFormatException();\r\n    }\r\n    const top_header_version = (str_decode(await file_reader(13, 16)));\r\n    if(!(['1.1', '1.2'].includes(top_header_version))) {\r\n        throw new Exceptions.EncryptionVersionMismatchException();\r\n    }\r\n    const version_marker = new DataView((await file_reader(16, 20)).buffer).getUint32(0, true);\r\n    const version = normalize_version(top_header_version, version_marker);\r\n    let read_pos = 16 + 4;\r\n\r\n    if (version === ENCRYPTION_FILE_VER_1_1_0) {\r\n        return await decrypt_file_V_1_1_0(file_reader, file_writer, user_key, callback);\r\n    }\r\n\r\n    const ekey_len = new DataView((await file_reader(read_pos, read_pos + 4)).buffer).getUint32(0, true);\r\n    const ekey = str_decode(await file_reader(read_pos + 4, read_pos + 4 + ekey_len));\r\n\r\n    read_pos += PADDING_SIZE;\r\n    \r\n    if (ekey_len > PADDING_SIZE) {\r\n        throw new Exceptions.InternalError(\"(Internal Error) This should not happen. Contact the application developer.\");\r\n    }\r\n        \r\n    // \u89E3\u5BC6\u4E3B\u5BC6\u94A5\r\n    const key = await decrypt_data(ekey, user_key);\r\n\r\n    // \u8BFB\u53D6\u5934\u90E8JSON\u957F\u5EA6\r\n    const json_len_bytes = await file_reader(read_pos, read_pos + 4);\r\n    const json_len = new DataView(json_len_bytes.buffer).getUint32(0, true);\r\n    read_pos += 4;\r\n\r\n    // \u89E3\u6790\u5934\u90E8JSON\r\n    const header_json = JSON.parse(\r\n        str_decode(await file_reader(read_pos, read_pos + json_len))\r\n    );\r\n    read_pos += json_len;\r\n\r\n    // \u63D0\u53D6\u6D3E\u751F\u53C2\u6570\r\n    const header_version = header_json.v;\r\n    if (!([5.5].includes(header_version))) throw new Exceptions.EncryptionVersionMismatchException();\r\n    const [phrase, salt_hex] = header_json.parameter.split(':');\r\n    const salt = unhexlify(salt_hex);\r\n    const iv4key = unhexlify(header_json.iv);\r\n    const N = header_json.N;\r\n\r\n    // \u83B7\u53D6chunk size\u548Civ\u53C2\u6570\r\n    const chunk_size = Number(new DataView((await file_reader(read_pos, read_pos + 8)).buffer).getBigUint64(0, true));\r\n    let nonce_counter = Number(new DataView((await file_reader(read_pos + 8, read_pos + 16)).buffer).getBigUint64(0, true));\r\n    read_pos += 16;\r\n\r\n    // \u5BF9\u5E94\u52A0\u5BC6\u65F6\uFF0C\u9700\u8981\u63D0\u4F9B\u4E00\u4E2Aiv\uFF0C\u6211\u4EEC\u628Aiv\u53D6\u56DE\u6765\uFF0C\u91CD\u65B0\u751F\u6210\u5BC6\u94A5\uFF08\u6240\u6709\u6570\u636E\u5757\u7684\u5BC6\u94A5\u662F\u76F8\u540C\u7684\uFF09\r\n    callback?.(0);\r\n    await nextTick();\r\n    const { derived_key } = await derive_key(key, iv4key, phrase, N, salt);\r\n\r\n    let total_bytes = 0, is_final_chunk = false;\r\n    // \u5206\u5757\u89E3\u5BC6\u5FAA\u73AF\r\n    const cryptoKey = await crypto.subtle.importKey('raw', derived_key, { name: 'AES-GCM' }, false, ['decrypt']);\r\n    while (true) {\r\n        // \u8BFB\u53D6\u5206\u5757\u957F\u5EA6\u6807\u8BB0\r\n        const chunk_tag = await file_reader(read_pos, read_pos + 8);\r\n\r\n        // \u68C0\u67E5\u7ED3\u675F\u6807\u8BB0\r\n        let real_size = 0;\r\n        if ((chunk_tag).every((v, i) => v === END_IDENTIFIER[i])) {\r\n            const full_bytes = await file_reader(read_pos, read_pos + 32); // \u8BFB\u53D6\u5B8C\u6574\u6807\u8BB0\r\n            if (full_bytes.every((v, i) => v === END_MARKER[i])) {\r\n                read_pos += 32; // \u8DF3\u8FC7\u6807\u8BB0\r\n                break;\r\n            }\r\n            if (full_bytes.every((v, i) => v === TAIL_BLOCK_MARKER[i])) {\r\n                is_final_chunk = true;\r\n                read_pos += 32; // \u8DF3\u8FC7\u6807\u8BB0\r\n                // \u8BFB\u53D6\u5206\u5757\u957F\u5EA6\r\n                const chunk_len_bytes = await file_reader(read_pos, read_pos + 8);\r\n                read_pos += 8;\r\n                real_size = Number(new DataView(chunk_len_bytes.buffer).getBigUint64(0, true));\r\n                if (real_size === 0) break; // \u8BFB\u53D6\u52300\u5B57\u8282\uFF0C\u7ED3\u675F\u5FAA\u73AF\r\n            }\r\n        }\r\n\r\n        // \u89E3\u6790\u5206\u5757\u957F\u5EA6\uFF08\u4E0D\u5305\u62EC16\u5B57\u8282\u6807\u7B7E\uFF09\r\n        const ciphertext_length = (is_final_chunk ? real_size : chunk_size)\r\n\r\n        // \u83B7\u53D6iv\r\n        const iv_array = new ArrayBuffer(12);\r\n        new DataView(iv_array).setBigUint64(4, BigInt(nonce_counter), true);\r\n        nonce_counter++;\r\n        \r\n        // \u8BFB\u53D6\u5BC6\u6587\u548Ctag(16\u5B57\u8282)\r\n        const ciphertext = await file_reader(read_pos, read_pos + ciphertext_length + 16);\r\n        read_pos += ciphertext_length + 16;\r\n\r\n        const full_ciphertext = ciphertext;\r\n\r\n        // \u4F7F\u7528WebCrypto\u89E3\u5BC6\r\n        try {\r\n            const decrypted = await crypto.subtle.decrypt(\r\n                {\r\n                    name: 'AES-GCM',\r\n                    iv: new Uint8Array(iv_array),\r\n                },\r\n                cryptoKey,\r\n                full_ciphertext\r\n            );\r\n\r\n            // \u5199\u5165\u89E3\u5BC6\u540E\u7684\u6570\u636E\r\n            await file_writer(new Uint8Array(decrypted));\r\n            total_bytes += decrypted.byteLength;\r\n        } catch (e) {\r\n            if (!e) throw new Exceptions.InternalError(`Internal error.`, { cause: e });\r\n            const name = e.name;\r\n            if (name === 'InvalidAccessError') throw new Exceptions.InvalidParameterException('InvalidAccessError.', { cause: e });\r\n            if (name === 'OperationError') throw new Exceptions.CannotDecryptException('Cannot decrypt. Did you provide the correct password?', { cause: e });\r\n            if (!e) throw new Exceptions.InternalError(`Unexpected error.`, { cause: e });\r\n        }\r\n        if (callback) callback(total_bytes);\r\n    }\r\n\r\n    // \u9A8C\u8BC1\u603B\u5B57\u8282\u6570\u548C\u7ED3\u675F\u6807\u8BB0\r\n    const total_bytes_bytes = await file_reader(read_pos, read_pos + 8);\r\n    const total_bytes_decrypted = Number(\r\n        new DataView(total_bytes_bytes.buffer).getBigUint64(0, true)\r\n    );\r\n    read_pos += 8;\r\n\r\n    const end_marker = await file_reader(read_pos, read_pos + FILE_END_MARKER.length);\r\n    if (total_bytes !== total_bytes_decrypted) throw new Exceptions.FileCorruptedException(\"total bytes mismatch\")\r\n    if (!end_marker.every((v, i) => v === FILE_END_MARKER[i])) throw new Exceptions.InvalidEndMarkerException();\r\n\r\n    return true;\r\n}\r\n", "import { str_encode, str_decode } from \"./str.js\";\r\nimport { encrypt_data, decrypt_data } from \"./encrypt_data.js\";\r\nimport { PADDING_SIZE, normalize_version, ENCRYPTION_FILE_VER_1_1_0, ENCRYPTION_FILE_VER_1_2_10020 } from \"./encrypt_file.js\";\r\nimport * as Exceptions from './exceptions.js';\r\n\r\n\r\n/**\r\n * Export the file's master key.\r\n * @param {Blob} file_head File header. Recommended to provide 5KB. At least provide 1044 bytes(V1.1) or .\r\n * @param {String} current_key current file password\r\n * @param {String} export_key The password to protect the master key\r\n * @returns String exported key\r\n */\r\nexport async function export_master_key(file_head, current_key, export_key) {\r\n    if (file_head.size < (1024 + 16 + 4)) throw new Exceptions.BadDataException('Data not enough');\r\n\r\n    // Verify file header\r\n    const headerBlob = file_head.slice(0, 13);\r\n    const header = await headerBlob.text();\r\n    if (header !== \"MyEncryption/\") {\r\n        throw new Exceptions.InvalidFileFormatException();\r\n    }\r\n    const top_header_version = await (file_head.slice(13, 16)).text();\r\n    if(!(['1.1', '1.2'].includes(top_header_version))) {\r\n        throw new Exceptions.EncryptionVersionMismatchException();\r\n    }\r\n    const version_marker = new DataView((await file_head.slice(16, 20).arrayBuffer())).getUint32(0, true);\r\n    const version = normalize_version(top_header_version, version_marker);\r\n\r\n    if (version === ENCRYPTION_FILE_VER_1_1_0) {\r\n        // Read encrypted master key length and ciphertext\r\n        const ekey_len = new DataView(await file_head.slice(16, 20).arrayBuffer()).getUint32(0, true);\r\n        const buffer = await file_head.slice(20, 20 + ekey_len).arrayBuffer();\r\n        const ekey_ciphertext = str_decode(buffer);\r\n        // Decrypt master key with current_key and re-encrypt with export_key\r\n        return await encrypt_data(await decrypt_data(ekey_ciphertext, current_key), export_key);\r\n    }\r\n\r\n    if (version === ENCRYPTION_FILE_VER_1_2_10020) {\r\n        if (file_head.size < 16 + PADDING_SIZE) throw new Exceptions.BadDataException('Data not enough');\r\n        const ekey_len = new DataView(await file_head.slice(20, 24).arrayBuffer()).getUint32(0, true);\r\n        const buffer = await file_head.slice(24, 24 + ekey_len).arrayBuffer();\r\n        const ekey_ciphertext = str_decode(buffer);\r\n        // Decrypt master key with current_key and re-encrypt with export_key\r\n        return await encrypt_data(await decrypt_data(ekey_ciphertext, current_key), export_key);\r\n    }\r\n\r\n    throw new Exceptions.EncryptionVersionMismatchException();\r\n}\r\n\r\n\r\n\r\nasync function change_file_password_1_1_0(file_head, current_key, new_key) {\r\n    if (file_head.size < (1024 + 16 + 4)) throw new Error('Data not enough');\r\n\r\n    // Verify file header\r\n    const headerBlob = file_head.slice(0, 16);\r\n    const header = await headerBlob.text();\r\n    if (header !== \"MyEncryption/1.1\") {\r\n        throw new TypeError(\"Invalid file format\");\r\n    }\r\n\r\n    // Read encrypted master key length and ciphertext\r\n    const ekey_len = new DataView(await file_head.slice(16, 20).arrayBuffer()).getUint32(0, true);\r\n    const ekey_ciphertext = str_decode(await file_head.slice(20, 20 + ekey_len).arrayBuffer());\r\n\r\n    // Decrypt master key with current_key and re-encrypt with export_key\r\n    const new_ekey = await encrypt_data(await decrypt_data(ekey_ciphertext, current_key), new_key);\r\n    // Check length\r\n    if (new_ekey.length > 1024) {\r\n        throw new Error(\"(Internal Error) This should not happen. Contact the application developer.\");\r\n    }\r\n    const new_ekey_len = new_ekey.length;\r\n    const new_ekey_len_bytes = new ArrayBuffer(4);\r\n    const new_ekey_len_view = new DataView(new_ekey_len_bytes);\r\n    new_ekey_len_view.setUint32(0, new_ekey_len, true);\r\n\r\n    const new_ekey_parts = [headerBlob, new_ekey_len_bytes, str_encode(new_ekey)];\r\n    const padding = new Uint8Array(1024 - new_ekey.length).fill(0);\r\n    new_ekey_parts.push(padding);\r\n\r\n    return new Blob(new_ekey_parts);\r\n}\r\n/**\r\n * Change file password\r\n * note: \u4E0D\u5EFA\u8BAE\u5728web\u7AEF\u66F4\u6539\u5BC6\u7801\u3002\u7531\u4E8E\u6D4F\u89C8\u5668\u5199\u5165\u6587\u4EF6\u7684\u5DE5\u4F5C\u539F\u7406\uFF08https://developer.mozilla.org/zh-CN/docs/Web/API/FileSystemFileHandle/createWritable \uFF09\r\n * \u4EFB\u4F55\u901A\u8FC7\u5199\u5165\u6D41\u9020\u6210\u7684\u66F4\u6539\u5728\u5199\u5165\u6D41\u88AB\u5173\u95ED\u524D\u90FD\u4E0D\u4F1A\u53CD\u6620\u5230\u6587\u4EF6\u53E5\u67C4\u6240\u4EE3\u8868\u7684\u6587\u4EF6\u4E0A\u3002\u8FD9\u901A\u5E38\u662F\u5C06\u6570\u636E\u5199\u5165\u5230\u4E00\u4E2A\u4E34\u65F6\u6587\u4EF6\u6765\u5B9E\u73B0\u7684\uFF0C\u7136\u540E\u53EA\u6709\u5728\u5199\u5165\u6587\u4EF6\u6D41\u88AB\u5173\u95ED\u540E\u624D\u4F1A\u7528\u4E34\u65F6\u6587\u4EF6\u66FF\u6362\u6389\u6587\u4EF6\u53E5\u67C4\u6240\u4EE3\u8868\u7684\u6587\u4EF6\u3002\r\n * \u4E5F\u5C31\u662F\u8BF4\uFF0C\u65E7\u5BC6\u7801\u5C06\u59CB\u7EC8\u5B58\u5728\u4E8E\u78C1\u76D8\u4E0A\u3002\u8FD9\u5C06\u5BFC\u81F4\u654F\u611F\u6570\u636E\u6CC4\u9732\u3002\r\n * \u53E6\u5916\uFF0C\u7531\u4E8E\u8FD9\u4E2A\u7279\u6027\uFF0C\u5927\u6587\u4EF6\u76F8\u5173\u64CD\u4F5C\u4F1A\u53D8\u5F97\u975E\u5E38\u975E\u5E38\u6162\u3002\r\n * \u6240\u4EE5\uFF0C\u9664\u975E\u7279\u6B8A\u60C5\u51B5\uFF0C\u52A1\u5FC5\u59CB\u7EC8\u4F7F\u7528 native \u5E94\u7528\u7A0B\u5E8F\u6765\u4FEE\u6539\u6587\u4EF6\u5BC6\u7801\r\n * @param {Blob} file_head File header. Recommended to provide 2KB. At least provide 1044 bytes.\r\n * @param {String} current_key current file password\r\n * @param {String} new_key The new password\r\n * @returns Blob The new file header. Note that the size of the new header differs from the original file. Do not use it to construct a new file. Instead, overwrite the original file header directly with the new header without offsetting the file.  \r\n * @throws {Error} If the file header is invalid or the file size is not enough.\r\n */\r\nexport async function change_file_password(file_head, current_key, new_key) {\r\n    if (file_head.size < (1024 + 16 + 4)) throw new Error('Data not enough');\r\n\r\n    // Verify file header\r\n    const headerBlob = file_head.slice(0, 13);\r\n    const header = await headerBlob.text();\r\n    if (header !== \"MyEncryption/\") {\r\n        throw new Exceptions.InvalidFileFormatException();\r\n    }\r\n    const top_header_version = await (file_head.slice(13, 16)).text();\r\n    if (!(['1.1', '1.2'].includes(top_header_version))) {\r\n        throw new Exceptions.EncryptionVersionMismatchException();\r\n    }\r\n    const version_marker = new DataView((await file_head.slice(16, 20).arrayBuffer())).getUint32(0, true);\r\n    const version = normalize_version(top_header_version, version_marker);\r\n\r\n    if (version === ENCRYPTION_FILE_VER_1_1_0) return await change_file_password_1_1_0(file_head, current_key, new_key);\r\n\r\n    // Read encrypted master key length and ciphertext\r\n    const ekey_len = new DataView(await file_head.slice(20, 24).arrayBuffer()).getUint32(0, true);\r\n    const ekey_ciphertext = str_decode(await file_head.slice(24, 24 + ekey_len).arrayBuffer());\r\n\r\n    // Decrypt master key with current_key and re-encrypt with export_key\r\n    const new_ekey = await encrypt_data(await decrypt_data(ekey_ciphertext, current_key), new_key);\r\n    // Check length\r\n    if (new_ekey.length > 1024) {\r\n        throw new Error(\"(Internal Error) This should not happen. Contact the application developer.\");\r\n    }\r\n    const new_ekey_len = new_ekey.length;\r\n    const new_ekey_len_bytes = new ArrayBuffer(4);\r\n    const new_ekey_len_view = new DataView(new_ekey_len_bytes);\r\n    new_ekey_len_view.setUint32(0, new_ekey_len, true);\r\n\r\n    const new_ekey_parts = [file_head.slice(0, 20), new_ekey_len_bytes, str_encode(new_ekey)];\r\n    const padding = new Uint8Array(PADDING_SIZE - new_ekey.length - 4).fill(0);\r\n    new_ekey_parts.push(padding);\r\n\r\n    return new Blob(new_ekey_parts);\r\n}", "import * as Exceptions from './exceptions.js';\r\n\r\nconst CRYPT_CONTEXT = Object.create(null);\r\nCRYPT_CONTEXT[Symbol.toStringTag] = 'CryptContext';\r\nCRYPT_CONTEXT['toString'] = function () {\r\n    return `${this[Symbol.toStringTag]} Object`;\r\n};\r\n\r\nexport { CRYPT_CONTEXT as CryptContext };\r\n\r\nasync function _await(PromiseLike) {\r\n    if (PromiseLike instanceof Promise) return await PromiseLike;\r\n    return PromiseLike;\r\n}\r\n\r\nexport async function crypt_context_create() {\r\n    const ctx = Object.create(CRYPT_CONTEXT);\r\n    ctx._created = true;\r\n    return ctx;\r\n}\r\n\r\nexport async function crypt_context_destroy(ctx) {\r\n    if (!ctx || ctx._released) throw new Exceptions.InvalidParameterException(\"Invalid context\");\r\n    for (const i of Reflect.ownKeys(ctx)) {\r\n        const o = Reflect.get(ctx, i);\r\n        if (o) {\r\n            if (o.release) await _await(o.release());\r\n            else if (o.free) await _await(o.free());\r\n            else if (o.reset) await _await(o.reset());\r\n            else if (o.clear) await _await(o.clear());\r\n        }\r\n        if (!i.startsWith('_')) Reflect.deleteProperty(ctx, i);\r\n    }\r\n    Object.defineProperty(ctx, '_released', { value: true });\r\n    return true;\r\n}\r\n\r\n", "// streamed encryption\r\nimport { CryptContext } from \"./context.js\";\r\nimport * as Exceptions from './exceptions.js';\r\nimport { str_decode } from \"./str.js\";\r\nimport { derive_key } from \"./derive_key.js\";\r\nimport { unhexlify } from \"./binascii.js\";\r\nimport { decrypt_data } from \"./encrypt_data.js\";\r\nimport { normalize_version, PADDING_SIZE, END_IDENTIFIER, END_MARKER, TAIL_BLOCK_MARKER, ENCRYPTION_FILE_VER_1_2_10020, FILE_END_MARKER } from \"./encrypt_file.js\";\r\n\r\n\r\nexport class Stream {\r\n    #reader = null;\r\n    #cache = {\r\n        position: null,\r\n        end: null,\r\n        data: null,\r\n    };\r\n    get [Symbol.toStringTag]() {\r\n        return 'Stream';\r\n    }\r\n\r\n    // reader \u5E94\u8BE5\u8FD4\u56DE AwaitAble<Uint8Array>\r\n    constructor(reader) {\r\n        if (typeof reader !== 'function') throw new Exceptions.InvalidParameterException('Invalid reader');\r\n        this.#reader = reader;\r\n    }\r\n\r\n    /**\r\n     * Read a stream\r\n     * @param {Number} start start pos\r\n     * @param {Number} end end pos\r\n     * @param {Number|null} suggestion_end The suggested end. Used for caching.\r\n     * @returns {Promise<Uint8Array>}\r\n     */\r\n    async read(start, end, suggestion_end = null) {\r\n        if (!this.#reader) throw new Error('Stream is closed.');\r\n        if (this.#cache.position && this.#cache.end && this.#cache.data && (start >= this.#cache.position && end <= this.#cache.end)) {\r\n            // cache match\r\n            return this.#cache.data.slice(start - this.#cache.position, end - this.#cache.position);\r\n        }\r\n        if (suggestion_end) {\r\n            // cache policy\r\n            const data = await this.#reader(start, suggestion_end);\r\n            // save cache\r\n            this.#cache.position = start;\r\n            this.#cache.end = start + data.length;\r\n            this.#cache.data = (data);\r\n            // return data\r\n            return data.slice(0, end - start);\r\n        }\r\n        // cache mismatch\r\n        const data = await this.#reader(start, end);\r\n        return data;\r\n    }\r\n\r\n    purge() {\r\n        this.#cache.position = this.#cache.data = this.#cache.end = null;\r\n    }\r\n\r\n    close() {\r\n        this.#reader = null;\r\n        this.purge();\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * Prepare for a stream decryption.\r\n * @param {CryptContext} ctx Context\r\n * @param {Stream} stream The stream to decrypt.\r\n * @param {String} password The password.\r\n */\r\nexport async function decrypt_stream_init(ctx, stream, size, password) {\r\n    if (ctx._inited) throw new Exceptions.CryptContextReusedException();\r\n    Object.defineProperty(ctx, '_inited', { value: true });\r\n\r\n    ctx._type = '@decrypt_stream';\r\n    ctx.stream = {\r\n        stream: stream,\r\n        release: () => ctx.stream.stream.close(),\r\n    };\r\n\r\n    // \u6D3E\u751F\u5BC6\u94A5\r\n    const header = await stream.read(0, 13);\r\n    if (str_decode(header) !== 'MyEncryption/') {\r\n        throw new Exceptions.InvalidFileFormatException();\r\n    }\r\n    const top_header_version = (str_decode(await stream.read(13, 16)));\r\n    if(!(['1.1', '1.2'].includes(top_header_version))) {\r\n        throw new Exceptions.EncryptionVersionMismatchException();\r\n    }\r\n    const version_marker = new DataView((await stream.read(16, 20)).buffer).getUint32(0, true);\r\n    const version = normalize_version(top_header_version, version_marker);\r\n    let read_pos = 16 + 4;\r\n\r\n    if (version !== ENCRYPTION_FILE_VER_1_2_10020) {\r\n        throw new Exceptions.NotSupportedException(\"Cannot perform a streamed decryption on V1.1 files\");\r\n    }\r\n\r\n    const ekey_len = new DataView((await stream.read(read_pos, read_pos + 4)).buffer).getUint32(0, true);\r\n    const ekey = str_decode(await stream.read(read_pos + 4, read_pos + 4 + ekey_len));\r\n\r\n    read_pos += PADDING_SIZE;\r\n    \r\n    if (ekey_len > PADDING_SIZE) {\r\n        throw new Exceptions.InternalError(\"(Internal Error) This should not happen. Contact the application developer.\");\r\n    }\r\n        \r\n    // \u89E3\u5BC6\u4E3B\u5BC6\u94A5\r\n    const key = await decrypt_data(ekey, password);\r\n\r\n    // \u8BFB\u53D6\u5934\u90E8JSON\u957F\u5EA6\r\n    const json_len_bytes = await stream.read(read_pos, read_pos + 4);\r\n    const json_len = new DataView(json_len_bytes.buffer).getUint32(0, true);\r\n    read_pos += 4;\r\n\r\n    // \u89E3\u6790\u5934\u90E8JSON\r\n    const header_json = JSON.parse(\r\n        str_decode(await stream.read(read_pos, read_pos + json_len))\r\n    );\r\n    read_pos += json_len;\r\n\r\n    // \u63D0\u53D6\u6D3E\u751F\u53C2\u6570\r\n    const header_version = header_json.v;\r\n    if (!([5.5].includes(header_version))) throw new Exceptions.EncryptionVersionMismatchException();\r\n    const [phrase, salt_hex] = header_json.parameter.split(':');\r\n    const salt = unhexlify(salt_hex);\r\n    const iv4key = unhexlify(header_json.iv);\r\n    const N = header_json.N;\r\n\r\n    // \u83B7\u53D6chunk size\u548Civ\u53C2\u6570\r\n    const chunk_size = Number(new DataView((await stream.read(read_pos, read_pos + 8)).buffer).getBigUint64(0, true));\r\n    let nonce_counter = Number(new DataView((await stream.read(read_pos + 8, read_pos + 16)).buffer).getBigUint64(0, true));\r\n    read_pos += 16;\r\n\r\n    // \u5BF9\u5E94\u52A0\u5BC6\u65F6\uFF0C\u9700\u8981\u63D0\u4F9B\u4E00\u4E2Aiv\uFF0C\u6211\u4EEC\u628Aiv\u53D6\u56DE\u6765\uFF0C\u91CD\u65B0\u751F\u6210\u5BC6\u94A5\uFF08\u6240\u6709\u6570\u636E\u5757\u7684\u5BC6\u94A5\u662F\u76F8\u540C\u7684\uFF09\r\n    const { derived_key } = await derive_key(key, iv4key, phrase, N, salt);\r\n    const cryptoKey = await crypto.subtle.importKey('raw', derived_key, { name: 'AES-GCM' }, false, ['decrypt']);\r\n\r\n    ctx.key = cryptoKey;\r\n    ctx.chunk_size = chunk_size;\r\n    ctx.nonce_counter = nonce_counter;\r\n    ctx.header_json_length = json_len;\r\n    ctx.size = size;\r\n\r\n    return true;\r\n}\r\n\r\n\r\n/**\r\n * Decrypt a stream.\r\n * @param {CryptContext} ctx Context\r\n * @param {Number} bytes_start The start byte to decrypt\r\n * @param {Number} bytes_end The end byte to decrypt\r\n * @returns {Promise<Blob>} The decrypted data, stored in a Blob object.\r\n */\r\nexport async function decrypt_stream(ctx, bytes_start, bytes_end) {\r\n    if (!ctx._inited) throw new Exceptions.CryptContextNotInitedException();\r\n    if (ctx._type !== '@decrypt_stream') throw new Exceptions.InvalidCryptContextTypeException(ctx._type);\r\n    if (ctx._released) throw new Exceptions.CryptContextReleasedException();\r\n\r\n    const stream = ctx.stream.stream;\r\n    const chunk_size = ctx.chunk_size;\r\n    const nonce_counter_start = ctx.nonce_counter;\r\n    const result = [];\r\n    \r\n    // \u6587\u4EF6\u593416 + \u7248\u672C\u6807\u8BC64 + \u4E3B\u5BC6\u94A54096 + JSON\u957F\u5EA64 + JSON + chunk_size8 + IV8\r\n    const chunks_start = 16 + 4 + PADDING_SIZE + 4 + ctx.header_json_length + 8 + 8;\r\n    // tag 16\u5B57\u8282\r\n    const size_per_chunk = chunk_size + 16\r\n\r\n    // \u786E\u5B9A\u9700\u8981\u89E3\u5BC6\u7684\u5206\u5757\u4F4D\u7F6E\r\n    const max_chunk = Math.floor((ctx.size - chunks_start - (32 + 8 + 32 + 8 + FILE_END_MARKER.length)) / size_per_chunk);\r\n    const start_chunk = Math.max(0, Math.floor(bytes_start / chunk_size));\r\n    const end_chunk = Math.min(max_chunk, Math.floor(bytes_end / chunk_size));\r\n    if (end_chunk < 0 || start_chunk > max_chunk) throw new Exceptions.InvalidParameterException(\"Out of range\")\r\n\r\n    // \u7528\u4E8E\u8BFB\u53D6chunk\r\n    const read_chunk = async (chunk) => {\r\n        // \u5B9A\u4F4D\u5BF9\u5E94chunk\r\n        let pos = chunks_start + (chunk * size_per_chunk);\r\n        // \u8BFB\u53D68\u5B57\u8282\r\n        const eight_bytes = await stream.read(pos, pos + 8, pos + (2 * size_per_chunk));\r\n        // \u5224\u65AD\u662F\u5426\u7279\u6B8A\u60C5\u51B5\r\n        let real_size = 0;\r\n        if ((eight_bytes).every((v, i) => v === END_IDENTIFIER[i])) {\r\n            const full_bytes = await stream.read(pos, pos + 32); // \u8BFB\u53D6\u5B8C\u6574\u6807\u8BB0\r\n            pos += 32;\r\n            // \u5224\u65AD\u662F\u5426\u7ED3\u675F\r\n            if (full_bytes.every((v, i) => v === END_MARKER[i])) {\r\n                return false\r\n            }\r\n            if (full_bytes.every((v, i) => v === TAIL_BLOCK_MARKER[i])) {\r\n                // \u8BFB\u53D6\u5206\u5757\u957F\u5EA6\r\n                const chunk_len_bytes = await stream.read(pos, pos + 8);\r\n                pos += 8;\r\n                real_size = Number(new DataView(chunk_len_bytes.buffer).getBigUint64(0, true));\r\n                if (real_size === 0) return false // \u8BFB\u53D6\u52300\u5B57\u8282\uFF0C\u7ED3\u675F\u5FAA\u73AF\r\n            }\r\n        }\r\n\r\n        // \u8BFB\u53D6\r\n        const ciphertext_length = (real_size ? real_size : chunk_size)\r\n        const ciphertext = await stream.read(pos, pos + ciphertext_length + 16);\r\n        // \u83B7\u53D6iv\r\n        const nonce_counter = nonce_counter_start + chunk;\r\n        const iv_array = new ArrayBuffer(12);\r\n        new DataView(iv_array).setBigUint64(4, BigInt(nonce_counter), true);\r\n\r\n        // \u4F7F\u7528WebCrypto\u89E3\u5BC6\r\n        try {\r\n            return await crypto.subtle.decrypt(\r\n                {\r\n                    name: 'AES-GCM',\r\n                    iv: new Uint8Array(iv_array),\r\n                },\r\n                ctx.key,\r\n                ciphertext\r\n            );\r\n        }\r\n        catch (e) {\r\n            if (!e) throw new Exceptions.InternalError(`Internal error.`, { cause: e });\r\n            const name = e.name;\r\n            if (name === 'InvalidAccessError') throw new Exceptions.InvalidParameterException('InvalidAccessError.', { cause: e });\r\n            if (name === 'OperationError') throw new Exceptions.CannotDecryptException('Cannot decrypt. Did you provide the correct password?', { cause: e });\r\n            if (!e) throw new Exceptions.InternalError(`Unexpected error.`, { cause: e });\r\n        }\r\n    };\r\n\r\n    // \u8BFB\u53D6chunk\r\n    let EOFbit = false;\r\n    for (let i = start_chunk; i <= end_chunk; i++) {\r\n        const decrypted_chunk = await read_chunk(i);\r\n        if (!decrypted_chunk) {\r\n            EOFbit = true;\r\n            break;\r\n        }\r\n        result.push(decrypted_chunk);\r\n    }\r\n\r\n    // \u5408\u6210Blob\r\n    const blob_full = new Blob(result);\r\n    // \u88C1\u526A\u9700\u8981\u7684\u90E8\u5206\r\n    const startpos = start_chunk * chunk_size;\r\n    // const endpos = (end_chunk + 1) * chunk_size - 1;\r\n    // bytes_start, bytes_end\r\n    const blob = blob_full.slice(bytes_start - startpos, bytes_end - startpos);\r\n    \r\n    if (EOFbit) blob.eof = true;\r\n    return blob;\r\n}\r\n", "export const VERSION = 'Encryption/5.5 FileEncryption/1.2 Patch/0.0';\r\n"],
  "mappings": "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",
  "names": ["load_script", "src", "resolve", "reject", "script", "e", "load_deps_es5", "deps_name", "deps_src", "load_script", "hexTable", "i", "hexlify", "data", "length", "arr", "throwing", "unhexlify", "hexStr", "bytes", "highCode", "lowCode", "high", "low", "get_random_bytes", "count", "randomBytes", "get_random_int8_number", "get_random_uint8_number", "str_encode", "input", "encoding", "str_decode", "exceptions_exports", "__export", "BadDataException", "CannotDecryptException", "CryptContextNotInitedException", "CryptContextReleasedException", "CryptContextReusedException", "EncryptionError", "EncryptionVersionMismatchException", "EndOfFileException", "FileCorruptedException", "IVException", "InternalError", "InvalidCryptContextTypeException", "InvalidEndMarkerException", "InvalidFileFormatException", "InvalidParameterException", "InvalidScryptParameterException", "NotSupportedException", "raise", "message", "additional", "scryptAPI", "load_deps_es5", "scrypt", "queue", "running", "work", "task", "resolve", "reject", "p", "dk", "e", "r", "thread", "nextTick", "key", "salt", "N", "dklen", "onprogress", "deriveKey__phrases", "derive_key", "iv", "phrase", "InvalidScryptParameterException", "get_random_bytes", "get_random_uint8_number", "InvalidParameterException", "parameter", "hexlify", "keyInput", "str_encode", "scrypt_hex", "safeparse", "json", "InvalidParameterException", "encrypt_data", "message", "key", "phrase", "N", "iv", "get_random_bytes", "derived_key", "parameter", "N2", "derive_key", "cipher", "str_encode", "ciphertext", "encrypted_message", "message_encrypted", "hexlify", "decrypt_data", "jsoned", "encrypted_data", "unhexlify", "salt_b64", "salt", "BadDataException", "tag", "decrypted_data", "str_decode", "e", "InternalError", "name", "CannotDecryptException", "nextTick", "r", "PADDING_SIZE", "END_IDENTIFIER", "TAIL_BLOCK_MARKER", "END_MARKER", "FILE_END_MARKER", "normalize_version", "major_version", "version_marker", "ENCRYPTION_FILE_VER_1_1_0", "ENCRYPTION_FILE_VER_1_2_10020", "encrypt_file", "file_reader", "file_writer", "user_key", "callback", "phrase", "N", "chunk_size", "str_encode", "VERSION_MARKER", "versionMarkerBuffer", "key", "hexlify", "get_random_bytes", "ekey", "encrypt_data", "ekey_bytes", "InternalError", "lengthBuffer", "padding", "iv_for_key", "derived_key", "parameter", "N2", "derive_key", "header_data", "header_json", "headerLengthBuffer", "chunkSizeBuffer", "total_bytes", "nonce_counter", "position", "nonce_counter_start", "cryptoKey", "chunk", "isFinalChunk", "iv", "IVException", "chunkLengthBuffer", "ivArray", "ciphertext", "ciphertextArray", "totalBytesBuffer", "decrypt_file_V_1_1_0", "header", "str_decode", "read_pos", "ekey_len_bytes", "ekey_len", "decrypt_data", "json_len_bytes", "json_len", "salt_hex", "salt", "unhexlify", "iv4key", "chunk_len_bytes", "v", "i", "chunk_len", "full_ciphertext", "decrypted", "total_bytes_bytes", "total_bytes_decrypted", "end_marker", "FileCorruptedException", "InvalidEndMarkerException", "decrypt_file", "InvalidFileFormatException", "top_header_version", "EncryptionVersionMismatchException", "version", "header_version", "is_final_chunk", "chunk_tag", "real_size", "full_bytes", "ciphertext_length", "iv_array", "e", "name", "InvalidParameterException", "CannotDecryptException", "export_master_key", "file_head", "current_key", "export_key", "BadDataException", "InvalidFileFormatException", "top_header_version", "EncryptionVersionMismatchException", "version_marker", "version", "normalize_version", "ENCRYPTION_FILE_VER_1_1_0", "ekey_len", "buffer", "ekey_ciphertext", "str_decode", "encrypt_data", "decrypt_data", "ENCRYPTION_FILE_VER_1_2_10020", "PADDING_SIZE", "change_file_password_1_1_0", "new_key", "headerBlob", "new_ekey", "new_ekey_len", "new_ekey_len_bytes", "new_ekey_parts", "str_encode", "padding", "change_file_password", "CRYPT_CONTEXT", "_await", "PromiseLike", "crypt_context_create", "ctx", "CRYPT_CONTEXT", "crypt_context_destroy", "InvalidParameterException", "i", "o", "Stream", "#reader", "#cache", "reader", "InvalidParameterException", "start", "end", "suggestion_end", "data", "decrypt_stream_init", "ctx", "stream", "size", "password", "CryptContextReusedException", "header", "str_decode", "InvalidFileFormatException", "top_header_version", "EncryptionVersionMismatchException", "version_marker", "version", "normalize_version", "read_pos", "ENCRYPTION_FILE_VER_1_2_10020", "NotSupportedException", "ekey_len", "ekey", "PADDING_SIZE", "InternalError", "key", "decrypt_data", "json_len_bytes", "json_len", "header_json", "header_version", "phrase", "salt_hex", "salt", "unhexlify", "iv4key", "N", "chunk_size", "nonce_counter", "derived_key", "derive_key", "cryptoKey", "decrypt_stream", "bytes_start", "bytes_end", "CryptContextNotInitedException", "InvalidCryptContextTypeException", "CryptContextReleasedException", "nonce_counter_start", "result", "chunks_start", "size_per_chunk", "max_chunk", "FILE_END_MARKER", "start_chunk", "end_chunk", "read_chunk", "chunk", "pos", "eight_bytes", "real_size", "v", "i", "END_IDENTIFIER", "full_bytes", "END_MARKER", "TAIL_BLOCK_MARKER", "chunk_len_bytes", "ciphertext_length", "ciphertext", "iv_array", "e", "name", "CannotDecryptException", "EOFbit", "decrypted_chunk", "blob_full", "startpos", "blob", "VERSION"]
}
