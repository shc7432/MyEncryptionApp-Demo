{
  "version": 3,
  "sources": ["../myencryption/loader.js", "../myencryption/binascii.js", "../myencryption/random.js", "../myencryption/str.js", "../myencryption/derive_key.js", "../myencryption/encrypt_data.js", "../myencryption/encrypt_file.js", "../myencryption/key_management.js"],
  "sourcesContent": ["export function load_script(src) {\r\n    return new Promise((resolve, reject) => {\r\n        const script = document.createElement('script');\r\n        script.src = src;\r\n        script.onload = () => resolve(script);\r\n        script.onerror = e => reject(e);\r\n        document.head.append(script);\r\n    });\r\n}\r\n\r\nexport function load_module(src) {\r\n    return import(src); // just a wrapper\r\n}\r\n\r\nexport function load_deps_es5(deps_name, deps_src) {\r\n    if (Reflect.has(globalThis, deps_name)) return Promise.resolve(Reflect.get(globalThis, deps_name));\r\n    return load_script(deps_src).then(() => {\r\n        return Reflect.get(globalThis, deps_name);\r\n    });\r\n}", "const hexTable = new Array(256);\r\nfor (let i = 0; i < 256; i++) {\r\n    hexTable[i] = i.toString(16).padStart(2, '0');\r\n}\r\n\r\nexport function hexlify(data) {\r\n    if (!data || !(data instanceof Uint8Array)) {\r\n        throw new TypeError(\"Input must be a Uint8Array\");\r\n    }\r\n    const length = data.length;\r\n    const arr = new Array(length);\r\n    for (let i = 0; i < length; i++) {\r\n        arr[i] = hexTable[data[i]];\r\n    }\r\n    return arr.join('');\r\n}\r\n\r\nexport function unhexlify(hexStr) {\r\n    if (typeof hexStr !== 'string') {\r\n        throw new TypeError(\"Input must be a string\");\r\n    }\r\n    const length = hexStr.length;\r\n    if (length % 2 !== 0) {\r\n        throw new TypeError(\"Hex string must have even length\");\r\n    }\r\n    hexStr = hexStr.toLowerCase();\r\n    const bytes = new Uint8Array(length >> 1);\r\n    for (let i = 0; i < length; i += 2) {\r\n        const highCode = hexStr.charCodeAt(i);\r\n        const lowCode = hexStr.charCodeAt(i + 1);\r\n\r\n        const high = highCode >= 97 && highCode <= 102 ? highCode - 87 :\r\n            highCode >= 48 && highCode <= 57 ? highCode - 48 : 0;\r\n        const low = lowCode >= 97 && lowCode <= 102 ? lowCode - 87 :\r\n            lowCode >= 48 && lowCode <= 57 ? lowCode - 48 : 0;\r\n\r\n        bytes[i >> 1] = (high << 4) | low;\r\n    }\r\n    return bytes;\r\n}", "export function get_random_bytes(count) {\r\n    const randomBytes = new Uint8Array(count);\r\n    crypto.getRandomValues(randomBytes);\r\n    return randomBytes;\r\n}\r\nexport function get_random_int8_number() {\r\n    const randomBytes = get_random_bytes(1);\r\n    return new Int8Array(randomBytes)[0];\r\n}\r\nexport function get_random_uint8_number() {\r\n    const randomBytes = get_random_bytes(1);\r\n    return new Uint8Array(randomBytes)[0];\r\n}", "export function str_encode(input, encoding = \"utf-8\") {\r\n    if (typeof input !== \"string\") {\r\n        throw new TypeError(\"Input must be a string\");\r\n    }\r\n    if (encoding.toLowerCase() !== \"utf-8\") {\r\n        throw new Error(\"Only 'utf-8' encoding is supported\");\r\n    }\r\n    return new TextEncoder().encode(input);\r\n}\r\nexport function str_decode(input, encoding = \"utf-8\") {\r\n    if (!(input instanceof Uint8Array)) {\r\n        input = new Uint8Array(input);\r\n    }\r\n    if (encoding.toLowerCase() !== \"utf-8\") {\r\n        throw new Error(\"Only 'utf-8' encoding is supported\");\r\n    }\r\n    return new TextDecoder().decode(input);\r\n}", "import { load_deps_es5 } from \"./loader.js\";\r\nconst scryptAPI = await load_deps_es5('scrypt', import.meta.resolve('./WebScrypt/scrypt.js'));\r\nimport { hexlify } from \"./binascii.js\";\r\nimport { get_random_bytes, get_random_uint8_number } from \"./random.js\";\r\nimport { str_encode } from \"./str.js\";\r\n\r\nscryptAPI.setResPath(import.meta.resolve('./WebScrypt/asset/'));\r\nscryptAPI.load();\r\n\r\n// \u5BF9 WebScrypt \u7684\u81EA\u5B9A\u4E49\u5C01\u88C5\r\nexport const scrypt = (function () {\r\n    const queue = [];\r\n    let running = false;\r\n    const work = (task) => new Promise(async (resolve, reject) => {\r\n        scryptAPI.onprogress = p => {\r\n            if (task.onprogress) task.onprogress(p);\r\n        };\r\n        scryptAPI.oncomplete = dk => {\r\n            task.resolve(dk);\r\n            resolve(true);\r\n        };\r\n        scryptAPI.onerror = e => {\r\n            task.reject(e);\r\n            resolve(false);\r\n        };\r\n        try {\r\n            scryptAPI.config({ N: task.N, r: task.r, P: task.p }, { maxPassLen: 8192, maxSaltLen: 2048, maxDkLen: 1024, maxThread: 1 });\r\n            await new Promise(r => scryptAPI.onready = r);\r\n            scryptAPI.hash(task.key, task.salt, task.dklen);\r\n        } catch (e) {\r\n            reject(e);\r\n        }\r\n    });\r\n    async function thread() {\r\n        while (queue.length) try {\r\n            const task = queue.splice(0, 1)[0];\r\n            await work(task);\r\n            await nextTick();\r\n        } catch (e) { console.error('[scrypt]', 'Task failed unexpectedly', e); }\r\n        running = false;\r\n    }\r\n    return function scrypt(key, salt, N, r, p, dklen, onprogress = null) {\r\n        return new Promise((resolve, reject) => {\r\n            queue.push({\r\n                key, salt, N, r, p, dklen, resolve, reject, onprogress\r\n            });\r\n            if (!running) {\r\n                running = true;\r\n                setTimeout(thread); // \u542F\u52A8\u5B8F\u4EFB\u52A1\r\n            }\r\n        });\r\n    }\r\n})();\r\n\r\nexport const deriveKey__phrases = ['Furina', 'Neuvillette', 'Venti', 'Nahida', 'Kinich', 'Kazuha'];\r\nexport async function derive_key(key, iv, phrase = null, N = null, salt = null, r = 8, p = 1, dklen = 32) {\r\n    if (N === null) N = 262144;\r\n    if (typeof N !== \"number\" || N > 2097152) {\r\n        throw new TypeError(\"Invalid or too large N value!\");\r\n    }\r\n\r\n    // (2) \u751F\u6210salt\r\n    if (!salt) {\r\n        salt = get_random_bytes(64);\r\n    }\r\n\r\n    // \u5904\u7406phrase\r\n    if (!phrase) {\r\n        phrase = deriveKey__phrases[(get_random_uint8_number()) % deriveKey__phrases.length];\r\n    }\r\n    if (phrase.includes(\":\")) {\r\n        throw new Error(\"phrase MUST NOT contain \\\":\\\"\");\r\n    }\r\n\r\n    const parameter = `${phrase}:${hexlify(salt)}`;\r\n\r\n    // (3) \u751F\u6210\u52A0\u5BC6\u5BC6\u94A5\r\n    const keyInput = `MyEncryption/1.1 Fontaine/4.2 Iv/${hexlify(iv)} user_parameter=${parameter} user_key=${key}`;\r\n\r\n    // \u4F7F\u7528Scrypt\u8FDB\u884C\u5BC6\u94A5\u6D3E\u751F(pycryptodome\u6CA1\u6709PBKDF2HMAC\uFF0C\u4F7F\u7528Scrypt\u4F5C\u4E3A\u66FF\u4EE3)\r\n    // AES-256\u9700\u898132\u5B57\u8282\u5BC6\u94A5\r\n    const derived_key = await scrypt(str_encode(keyInput), salt, N, r, p, dklen)\r\n\r\n    return ({ derived_key, parameter, N });\r\n}\r\n\r\nfunction nextTick() {\r\n    return new Promise(r => setTimeout(r));\r\n}\r\n\r\n\r\nexport async function scrypt_hex(key, salt, N, r, p, dklen) {\r\n    return hexlify(await scrypt(str_encode(key), str_encode(salt), N, r, p, dklen));\r\n}", "import { get_random_bytes } from \"./random.js\";\r\nimport { derive_key } from \"./derive_key.js\";\r\nimport { hexlify, unhexlify } from \"./binascii.js\";\r\nimport { str_decode, str_encode } from \"./str.js\";\r\n\r\nfunction safeparse(json) {\r\n    try {\r\n        return JSON.parse(json);\r\n    } catch {\r\n        throw new TypeError('Invalid Parameter.');\r\n    }\r\n}\r\n\r\nexport async function encrypt_data(message, key, phrase = null, N = null) {\r\n    // (1) \u751F\u6210\u968F\u673AIV (12 bytes for GCM)\r\n    const iv = get_random_bytes(12);\r\n\r\n    // \u6D3E\u751F\u5BC6\u94A5\r\n    const { derived_key, parameter, N: N2 } = await derive_key(key, iv, phrase, N);\r\n    N = N2;\r\n\r\n    // (4) \u52A0\u5BC6\u6D88\u606F\r\n    const cipher = await crypto.subtle.importKey(\"raw\", derived_key, \"AES-GCM\", false, [\"encrypt\"]);\r\n\r\n    if (typeof message === \"string\") {\r\n        message = str_encode(message);\r\n    }\r\n\r\n    const ciphertext = await crypto.subtle.encrypt(\r\n        {\r\n            name: \"AES-GCM\",\r\n            iv: iv\r\n        },\r\n        cipher,\r\n        message\r\n    );\r\n\r\n    // \u7EC4\u5408IV + \u5BC6\u6587 + \u8BA4\u8BC1\u6807\u7B7E\r\n    const encrypted_message = new Uint8Array(iv.length + ciphertext.byteLength);\r\n    encrypted_message.set(iv, 0);\r\n    encrypted_message.set(new Uint8Array(ciphertext), iv.length);\r\n    const message_encrypted = hexlify(encrypted_message);\r\n\r\n    return JSON.stringify({\r\n        data: message_encrypted,\r\n        parameter: parameter,\r\n        N: N,\r\n        v: 5.5\r\n    });\r\n}\r\n\r\n\r\nexport async function decrypt_data(message_encrypted, key) {\r\n    const jsoned = safeparse(message_encrypted);\r\n    const parameter = jsoned.parameter;\r\n    const N = parseInt(jsoned.N);\r\n\r\n    // \u5C06\u5341\u516D\u8FDB\u5236\u5B57\u7B26\u4E32\u8F6C\u6362\u56DE\u5B57\u8282\r\n    const encrypted_data = unhexlify(jsoned.data);\r\n    const [phrase, salt_b64] = parameter.split(':');\r\n    const salt = unhexlify(salt_b64);\r\n\r\n    if (isNaN(N) || !parameter || !encrypted_data || !salt) throw new TypeError('The message or parameters are bad.')\r\n    if (encrypted_data.length < 28) throw new TypeError(\"The message was too short.\");\r\n\r\n    // \u63D0\u53D6 IV (\u524D12\u5B57\u8282)\u3001\u5BC6\u6587\u548C\u8BA4\u8BC1\u6807\u7B7E(\u6700\u540E16\u5B57\u8282)\r\n    const iv = encrypted_data.slice(0, 12);\r\n    const ciphertext = encrypted_data.slice(12, -16);\r\n    const tag = encrypted_data.slice(-16);\r\n\r\n    const { derived_key } = await derive_key(key, iv, phrase, N, salt);\r\n\r\n    const cipher = await crypto.subtle.importKey(\"raw\", derived_key, \"AES-GCM\", false, [\"decrypt\"]);\r\n\r\n    const decrypted_data = await crypto.subtle.decrypt(\r\n        {\r\n            name: \"AES-GCM\",\r\n            iv: iv,\r\n        },\r\n        cipher,\r\n        new Uint8Array([...ciphertext, ...tag])\r\n    );\r\n\r\n    try {\r\n        return str_decode(decrypted_data);\r\n    } catch {\r\n        return decrypted_data;\r\n    }\r\n}\r\n\r\n", "import { derive_key } from \"./derive_key.js\";\r\nimport { hexlify, unhexlify } from \"./binascii.js\";\r\nimport { get_random_bytes } from \"./random.js\";\r\nimport { str_encode, str_decode } from \"./str.js\";\r\nimport { encrypt_data, decrypt_data } from \"./encrypt_data.js\";\r\n\r\nfunction nextTick() {\r\n    return new Promise(r => requestAnimationFrame(r));\r\n}\r\n\r\n/**\r\n * \u52A0\u5BC6\u6587\u4EF6\r\n * @param {Object} file_reader - \u6587\u4EF6\u8BFB\u53D6\u5668\u5BF9\u8C61\uFF0C\u9700\u8981\u5B9E\u73B0(start, end) => Promise<Uint8Array>\r\n * @param {Object} file_writer - \u6587\u4EF6\u5199\u5165\u5668\u5BF9\u8C61\uFF0C\u9700\u8981\u5B9E\u73B0write(Uint8Array)\u65B9\u6CD5\r\n * @param {string} key - \u7528\u6237\u5BC6\u94A5\r\n * @param {string|null} phrase - \u53EF\u9009\u77ED\u8BED\uFF0C\u7528\u4E8E\u5BC6\u94A5\u6D3E\u751F\r\n * @param {number|null} N - scrypt\u53C2\u6570N\r\n * @param {number} chunk_size - \u5206\u5757\u5927\u5C0F\uFF0C\u9ED8\u8BA4\u4E3A32MB\r\n * @returns {Promise<boolean>} \u8FD4\u56DE\u52A0\u5BC6\u662F\u5426\u6210\u529F\r\n */\r\nexport async function encrypt_file(file_reader, file_writer, user_key, callback = null, phrase = null, N = null, chunk_size = 32 * 1024 * 1024) {\r\n    // \u5199\u5165\u6587\u4EF6\u5934\u6807\u8BC6\u548C\u7248\u672C (16\u5B57\u8282)\r\n    await file_writer(str_encode('MyEncryption/1.1'));\r\n\r\n    // \u4EA7\u751F\u4E3B\u5BC6\u94A5\r\n    // TODO: \u4E3B\u5BC6\u94A5\u7684\u968F\u673A\u6027\u975E\u5E38\u91CD\u8981\uFF01\u8003\u8651\u8BA9\u7528\u6237\u79FB\u52A8\u9F20\u6807\u6765\u6536\u96C6\u968F\u673A\u6027\r\n    const key = hexlify(get_random_bytes(64));\r\n    const ekey = await encrypt_data(key, user_key);\r\n    const ekey_bytes = str_encode(ekey);\r\n\r\n    // \u68C0\u67E5\u957F\u5EA6\r\n    if (ekey_bytes.length > 1024) {\r\n        throw new Error(\"(Internal Error) This should not happen. Contact the application developer.\");\r\n    }\r\n\r\n    // \u5199\u5165\u4E3B\u5BC6\u94A5\u5BC6\u6587\u957F\u5EA6(4\u5B57\u8282)\u548C\u5185\u5BB9\uFF0C\u586B\u5145\u52301024\u5B57\u8282\r\n    const lengthBuffer = new ArrayBuffer(4);\r\n    new DataView(lengthBuffer).setUint32(0, ekey_bytes.length, true);\r\n    await file_writer(new Uint8Array(lengthBuffer));\r\n    await file_writer(ekey_bytes);\r\n\r\n    // \u586B\u5145\u5269\u4F59\u7A7A\u95F4\r\n    const padding = new Uint8Array(1024 - ekey_bytes.length).fill(0);\r\n    await file_writer(padding);\r\n\r\n    // \u751F\u6210\u521D\u59CBIV\u7528\u4E8E\u6D3E\u751F\u5BC6\u94A5 (12\u5B57\u8282)\r\n    callback?.(0); await nextTick();\r\n    const iv_for_key = get_random_bytes(12);\r\n    const { derived_key, parameter, N: N2 } = await derive_key(key, iv_for_key, phrase, N);\r\n    N = N2;\r\n\r\n    // \u51C6\u5907\u5934\u90E8JSON\u6570\u636E\r\n    const header_data = {\r\n        \"parameter\": parameter,\r\n        \"N\": N,\r\n        \"v\": 5.5,\r\n        \"iv\": hexlify(iv_for_key)\r\n    };\r\n    const header_json = str_encode(JSON.stringify(header_data));\r\n\r\n    // \u5199\u5165JSON\u957F\u5EA6(4\u5B57\u8282)\u548CJSON\u6570\u636E\r\n    const headerLengthBuffer = new ArrayBuffer(4);\r\n    new DataView(headerLengthBuffer).setUint32(0, header_json.length, true);\r\n    await file_writer(new Uint8Array(headerLengthBuffer));\r\n    await file_writer(header_json);\r\n\r\n    let total_bytes = 0; // \u7528\u4E8E\u7EDF\u8BA1\u603B\u5B57\u8282\u6570\r\n    let nonce_counter = 1;\r\n    let position = 0;\r\n\r\n    // \u5206\u5757\u52A0\u5BC6\u5904\u7406\r\n    callback?.(0);\r\n    const cryptoKey = await crypto.subtle.importKey('raw', derived_key, { name: 'AES-GCM' }, false, ['encrypt']);\r\n    while (true) {\r\n        // \u8BFB\u53D6\u6587\u4EF6\u5757\r\n        const chunk = await file_reader(position, position + chunk_size);\r\n        if (chunk.length === 0) break;\r\n\r\n        // \u4E3A\u6BCF\u4E2A\u5206\u5757\u751F\u6210\u65B0IV (12\u5B57\u8282)\r\n        const iv = new ArrayBuffer(12);\r\n        new DataView(iv).setBigUint64(4, BigInt(nonce_counter)); // \u5199\u51658\u5B57\u8282\u8BA1\u6570\u5668\r\n        nonce_counter++;\r\n\r\n        // \u4F7F\u7528WebCrypto\u8FDB\u884C\u52A0\u5BC6\r\n        const ivArray = new Uint8Array(iv);\r\n        const ciphertext = await crypto.subtle.encrypt(\r\n            {\r\n                name: 'AES-GCM',\r\n                iv: ivArray,\r\n            },\r\n            cryptoKey,\r\n            chunk\r\n        );\r\n\r\n        // \u5206\u79BB\u5BC6\u6587\u548Ctag (\u6700\u540E16\u5B57\u8282\u662Ftag)\r\n        const ciphertextArray = new Uint8Array(ciphertext);\r\n        const tag = ciphertextArray.slice(-16);\r\n        const encryptedData = ciphertextArray.slice(0, -16);\r\n\r\n        // \u5199\u5165\u5206\u5757\u4FE1\u606F: \u539F\u59CB\u6570\u636E\u957F\u5EA6(8\u5B57\u8282) + IV(12\u5B57\u8282) + \u5BC6\u6587 + tag(16\u5B57\u8282)\r\n        const chunkLenBuffer = new ArrayBuffer(8);\r\n        new DataView(chunkLenBuffer).setBigUint64(0, BigInt(chunk.length), true);\r\n        await file_writer(new Uint8Array(chunkLenBuffer));\r\n        await file_writer(ivArray);\r\n        await file_writer(encryptedData);\r\n        await file_writer(tag);\r\n\r\n        total_bytes += chunk.length;\r\n        position += chunk.length;\r\n\r\n        callback?.(total_bytes);\r\n    }\r\n\r\n    // \u5199\u5165\u7ED3\u675F\u6807\u8BB0\u548C\u603B\u5B57\u8282\u6570\r\n    await file_writer(new Uint8Array([0xFF, 0xFD, 0xF0, 0x10, 0x13, 0xD0, 0x12, 0x18]));\r\n\r\n    const totalBytesBuffer = new ArrayBuffer(8);\r\n    new DataView(totalBytesBuffer).setBigUint64(0, BigInt(total_bytes), true);\r\n    await file_writer(new Uint8Array(totalBytesBuffer));\r\n    await file_writer(new Uint8Array([0x55, 0xAA]));\r\n\r\n    return true;\r\n}\r\n/**\r\n * \u89E3\u5BC6\u6587\u4EF6\r\n * @param {Object} file_reader - \u6587\u4EF6\u8BFB\u53D6\u5668\u5BF9\u8C61\uFF0C\u9700\u8981\u5B9E\u73B0(start, end) => Promise<Uint8Array>\r\n * @param {Object} file_writer - \u6587\u4EF6\u5199\u5165\u5668\u5BF9\u8C61\uFF0C\u9700\u8981\u5B9E\u73B0write(Uint8Array)\u65B9\u6CD5\r\n * @param {string} user_key - \u7528\u6237\u63D0\u4F9B\u7684\u89E3\u5BC6\u5BC6\u94A5\r\n * @param {Function} [callback=null] - \u8FDB\u5EA6\u56DE\u8C03\u51FD\u6570\r\n * @returns {Promise<boolean>} \u8FD4\u56DE\u89E3\u5BC6\u662F\u5426\u6210\u529F\r\n */\r\nexport async function decrypt_file(file_reader, file_writer, user_key, callback = null) {\r\n    // \u8BFB\u53D6\u6587\u4EF6\u5934\u5E76\u9A8C\u8BC1\r\n    const header = await file_reader(0, 16);\r\n    if (str_decode(header) !== 'MyEncryption/1.1') {\r\n        throw new TypeError(\"Invalid file format\");\r\n    }\r\n    let read_pos = 16;\r\n\r\n    // \u8BFB\u53D6\u4E3B\u5BC6\u94A5\u5BC6\u6587\u957F\u5EA6\r\n    const ekey_len_bytes = await file_reader(read_pos, read_pos + 4);\r\n    const ekey_len = new DataView(ekey_len_bytes.buffer).getUint32(0, true);\r\n    read_pos += 4;\r\n\r\n    // \u8BFB\u53D6\u4E3B\u5BC6\u94A5\u5BC6\u6587\u5E76\u8DF3\u8FC7\u586B\u5145\r\n    const ekey = str_decode(await file_reader(read_pos, read_pos + ekey_len));\r\n    read_pos += 1024; // \u76F4\u63A5\u8DF3\u8FC71024\u5B57\u8282\u533A\u57DF\r\n\r\n    // \u89E3\u5BC6\u4E3B\u5BC6\u94A5 (\u5047\u8BBEdecrypt_data\u5DF2\u5B9E\u73B0)\r\n    const key = await decrypt_data(ekey, user_key);\r\n\r\n    // \u8BFB\u53D6\u5934\u90E8JSON\u957F\u5EA6\r\n    const json_len_bytes = await file_reader(read_pos, read_pos + 4);\r\n    const json_len = new DataView(json_len_bytes.buffer).getUint32(0, true);\r\n    read_pos += 4;\r\n\r\n    // \u89E3\u6790\u5934\u90E8JSON\r\n    const header_json = JSON.parse(\r\n        str_decode(await file_reader(read_pos, read_pos + json_len))\r\n    );\r\n    read_pos += json_len;\r\n\r\n    // \u63D0\u53D6\u6D3E\u751F\u53C2\u6570\r\n    const [phrase, salt_hex] = header_json.parameter.split(':');\r\n    const salt = unhexlify(salt_hex);\r\n    const iv4key = unhexlify(header_json.iv);\r\n    const N = header_json.N;\r\n\r\n    // \u5BF9\u5E94\u52A0\u5BC6\u65F6\uFF0C\u9700\u8981\u63D0\u4F9B\u4E00\u4E2Aiv\uFF0C\u6211\u4EEC\u628Aiv\u53D6\u56DE\u6765\uFF0C\u91CD\u65B0\u751F\u6210\u5BC6\u94A5\uFF08\u6240\u6709\u6570\u636E\u5757\u7684\u5BC6\u94A5\u662F\u76F8\u540C\u7684\uFF09\r\n    callback?.(0);\r\n    await nextTick();\r\n    const { derived_key } = await derive_key(key, iv4key, phrase, N, salt);\r\n\r\n    let total_bytes = 0;\r\n    // \u5206\u5757\u89E3\u5BC6\u5FAA\u73AF\r\n    const cryptoKey = await crypto.subtle.importKey('raw', derived_key, { name: 'AES-GCM' }, false, ['decrypt']);\r\n    while (true) {\r\n        // \u8BFB\u53D6\u5206\u5757\u957F\u5EA6\u6807\u8BB0\r\n        const chunk_len_bytes = await file_reader(read_pos, read_pos + 8);\r\n        read_pos += 8;\r\n\r\n        // \u68C0\u67E5\u7ED3\u675F\u6807\u8BB0\r\n        if (chunk_len_bytes.every((v, i) =>\r\n            v === [0xFF, 0xFD, 0xF0, 0x10, 0x13, 0xD0, 0x12, 0x18][i]\r\n        )) break;\r\n\r\n        // \u89E3\u6790\u5206\u5757\u957F\u5EA6\r\n        const chunk_len = Number(\r\n            new DataView(chunk_len_bytes.buffer).getBigUint64(0, true)\r\n        );\r\n\r\n        // \u8BFB\u53D6IV(12\u5B57\u8282)\u3001\u5BC6\u6587\u548Ctag(16\u5B57\u8282)\r\n        const iv = await file_reader(read_pos, read_pos + 12);\r\n        read_pos += 12;\r\n        const ciphertext = await file_reader(read_pos, read_pos + chunk_len + 16);\r\n        read_pos += chunk_len + 16;\r\n\r\n        const full_ciphertext = ciphertext;\r\n\r\n        // \u4F7F\u7528WebCrypto\u89E3\u5BC6\r\n        const decrypted = await crypto.subtle.decrypt(\r\n            {\r\n                name: 'AES-GCM',\r\n                iv: iv,\r\n            },\r\n            cryptoKey,\r\n            full_ciphertext\r\n        );\r\n\r\n        // \u5199\u5165\u89E3\u5BC6\u540E\u7684\u6570\u636E\r\n        await file_writer(new Uint8Array(decrypted));\r\n        total_bytes += decrypted.byteLength;\r\n        if (callback) callback(total_bytes);\r\n    }\r\n\r\n    // \u9A8C\u8BC1\u603B\u5B57\u8282\u6570\u548C\u7ED3\u675F\u6807\u8BB0\r\n    const total_bytes_bytes = await file_reader(read_pos, read_pos + 8);\r\n    const total_bytes_decrypted = Number(\r\n        new DataView(total_bytes_bytes.buffer).getBigUint64(0, true)\r\n    );\r\n    read_pos += 8;\r\n\r\n    const end_marker = await file_reader(read_pos, read_pos + 2);\r\n    if (total_bytes !== total_bytes_decrypted) throw new TypeError(\"File corrupted: total bytes mismatch\")\r\n    if (!end_marker.every((v, i) => v === [0x55, 0xAA][i])) throw new TypeError(\"Invalid end marker\");\r\n\r\n    return true;\r\n}\r\n", "import { str_encode, str_decode } from \"./str.js\";\r\nimport { encrypt_data, decrypt_data } from \"./encrypt_data.js\";\r\n\r\n\r\n/**\r\n * Export the file's master key.\r\n * @param {Blob} file_head File header. Recommended to provide 2KB. At least provide 1044 bytes.\r\n * @param {String} current_key current file password\r\n * @param {String} export_key The password to protect the master key\r\n * @returns String exported key\r\n */\r\nexport async function export_master_key(file_head, current_key, export_key) {\r\n    if (file_head.size < (1024 + 16 + 4)) throw new Error('Data not enough');\r\n\r\n    // Verify file header\r\n    const headerBlob = file_head.slice(0, 16);\r\n    const header = await headerBlob.text();\r\n    if (header !== \"MyEncryption/1.1\") {\r\n        throw new TypeError(\"Invalid file format\");\r\n    }\r\n\r\n    // Read encrypted master key length and ciphertext\r\n    const ekey_len = new DataView(await file_head.slice(16, 20).arrayBuffer()).getUint32(0, true);\r\n    const buffer = await file_head.slice(20, 20 + ekey_len).arrayBuffer();\r\n    const ekey_ciphertext = str_decode(buffer);\r\n\r\n    // Decrypt master key with current_key and re-encrypt with export_key\r\n    return await encrypt_data(await decrypt_data(ekey_ciphertext, current_key));\r\n}\r\n\r\n\r\n\r\n/**\r\n * Change file password\r\n * note: \u4E0D\u5EFA\u8BAE\u5728web\u7AEF\u66F4\u6539\u5BC6\u7801\u3002\u7531\u4E8E\u6D4F\u89C8\u5668\u5199\u5165\u6587\u4EF6\u7684\u5DE5\u4F5C\u539F\u7406\uFF08https://developer.mozilla.org/zh-CN/docs/Web/API/FileSystemFileHandle/createWritable \uFF09\r\n * \u4EFB\u4F55\u901A\u8FC7\u5199\u5165\u6D41\u9020\u6210\u7684\u66F4\u6539\u5728\u5199\u5165\u6D41\u88AB\u5173\u95ED\u524D\u90FD\u4E0D\u4F1A\u53CD\u6620\u5230\u6587\u4EF6\u53E5\u67C4\u6240\u4EE3\u8868\u7684\u6587\u4EF6\u4E0A\u3002\u8FD9\u901A\u5E38\u662F\u5C06\u6570\u636E\u5199\u5165\u5230\u4E00\u4E2A\u4E34\u65F6\u6587\u4EF6\u6765\u5B9E\u73B0\u7684\uFF0C\u7136\u540E\u53EA\u6709\u5728\u5199\u5165\u6587\u4EF6\u6D41\u88AB\u5173\u95ED\u540E\u624D\u4F1A\u7528\u4E34\u65F6\u6587\u4EF6\u66FF\u6362\u6389\u6587\u4EF6\u53E5\u67C4\u6240\u4EE3\u8868\u7684\u6587\u4EF6\u3002\r\n * \u4E5F\u5C31\u662F\u8BF4\uFF0C\u65E7\u5BC6\u7801\u5C06\u59CB\u7EC8\u5B58\u5728\u4E8E\u78C1\u76D8\u4E0A\u3002\u8FD9\u5C06\u5BFC\u81F4\u654F\u611F\u6570\u636E\u6CC4\u9732\u3002\r\n * \u53E6\u5916\uFF0C\u7531\u4E8E\u8FD9\u4E2A\u7279\u6027\uFF0C\u5927\u6587\u4EF6\u76F8\u5173\u64CD\u4F5C\u4F1A\u53D8\u5F97\u975E\u5E38\u975E\u5E38\u6162\u3002\r\n * \u6240\u4EE5\uFF0C\u9664\u975E\u7279\u6B8A\u60C5\u51B5\uFF0C\u52A1\u5FC5\u59CB\u7EC8\u4F7F\u7528 native \u5E94\u7528\u7A0B\u5E8F\u6765\u4FEE\u6539\u6587\u4EF6\u5BC6\u7801\r\n * @param {Blob} file_head File header. Recommended to provide 2KB. At least provide 1044 bytes.\r\n * @param {String} current_key current file password\r\n * @param {String} new_key The new password\r\n * @returns Blob The new file header. Note that the size of the new header differs from the original file. Do not use it to construct a new file. Instead, overwrite the original file header directly with the new header without offsetting the file.  \r\n * @throws {Error} If the file header is invalid or the file size is not enough.\r\n */\r\nexport async function change_file_password(file_head, current_key, new_key) {\r\n    if (file_head.size < (1024 + 16 + 4)) throw new Error('Data not enough');\r\n\r\n    // Verify file header\r\n    const headerBlob = file_head.slice(0, 16);\r\n    const header = await headerBlob.text();\r\n    if (header !== \"MyEncryption/1.1\") {\r\n        throw new TypeError(\"Invalid file format\");\r\n    }\r\n\r\n    // Read encrypted master key length and ciphertext\r\n    const ekey_len = new DataView(await file_head.slice(16, 20).arrayBuffer()).getUint32(0, true);\r\n    const ekey_ciphertext = str_decode(await file_head.slice(20, 20 + ekey_len).arrayBuffer());\r\n\r\n    // Decrypt master key with current_key and re-encrypt with export_key\r\n    const new_ekey = await encrypt_data(await decrypt_data(ekey_ciphertext, current_key), new_key);\r\n    // Check length\r\n    if (new_ekey.length > 1024) {\r\n        throw new Error(\"(Internal Error) This should not happen. Contact the application developer.\");\r\n    }\r\n    const new_ekey_len = new_ekey.length;\r\n    const new_ekey_len_bytes = new ArrayBuffer(4);\r\n    const new_ekey_len_view = new DataView(new_ekey_len_bytes);\r\n    new_ekey_len_view.setUint32(0, new_ekey_len, true);\r\n\r\n    const new_ekey_parts = [headerBlob, new_ekey_len_bytes, str_encode(new_ekey)];\r\n    const padding = new Uint8Array(1024 - new_ekey.length).fill(0);\r\n    new_ekey_parts.push(padding);\r\n\r\n    return new Blob(new_ekey_parts);\r\n}"],
  "mappings": "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",
  "names": ["load_script", "src", "resolve", "reject", "script", "e", "load_deps_es5", "deps_name", "deps_src", "load_script", "hexTable", "i", "hexlify", "data", "length", "arr", "unhexlify", "hexStr", "bytes", "highCode", "lowCode", "high", "low", "get_random_bytes", "count", "randomBytes", "get_random_int8_number", "get_random_uint8_number", "str_encode", "input", "encoding", "str_decode", "scryptAPI", "load_deps_es5", "scrypt", "queue", "running", "work", "task", "resolve", "reject", "p", "dk", "e", "r", "thread", "nextTick", "key", "salt", "N", "dklen", "onprogress", "deriveKey__phrases", "derive_key", "iv", "phrase", "get_random_bytes", "get_random_uint8_number", "parameter", "hexlify", "keyInput", "str_encode", "scrypt_hex", "safeparse", "json", "encrypt_data", "message", "key", "phrase", "N", "iv", "get_random_bytes", "derived_key", "parameter", "N2", "derive_key", "cipher", "str_encode", "ciphertext", "encrypted_message", "message_encrypted", "hexlify", "decrypt_data", "jsoned", "encrypted_data", "unhexlify", "salt_b64", "salt", "tag", "decrypted_data", "str_decode", "nextTick", "r", "encrypt_file", "file_reader", "file_writer", "user_key", "callback", "phrase", "N", "chunk_size", "str_encode", "key", "hexlify", "get_random_bytes", "ekey", "encrypt_data", "ekey_bytes", "lengthBuffer", "padding", "iv_for_key", "derived_key", "parameter", "N2", "derive_key", "header_data", "header_json", "headerLengthBuffer", "total_bytes", "nonce_counter", "position", "cryptoKey", "chunk", "iv", "ivArray", "ciphertext", "ciphertextArray", "tag", "encryptedData", "chunkLenBuffer", "totalBytesBuffer", "decrypt_file", "header", "str_decode", "read_pos", "ekey_len_bytes", "ekey_len", "decrypt_data", "json_len_bytes", "json_len", "salt_hex", "salt", "unhexlify", "iv4key", "chunk_len_bytes", "v", "i", "chunk_len", "full_ciphertext", "decrypted", "total_bytes_bytes", "total_bytes_decrypted", "end_marker", "export_master_key", "file_head", "current_key", "export_key", "ekey_len", "buffer", "ekey_ciphertext", "str_decode", "encrypt_data", "decrypt_data", "change_file_password", "new_key", "headerBlob", "new_ekey", "new_ekey_len", "new_ekey_len_bytes", "new_ekey_parts", "str_encode", "padding"]
}
